{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/New%20folder/Inventory_Management/src/components/page-header.tsx"],"sourcesContent":["type PageHeaderProps = {\r\n  title: string;\r\n  description?: string;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport function PageHeader({ title, description, children }: PageHeaderProps) {\r\n  return (\r\n    <div className=\"flex flex-col items-start justify-between gap-4 md:flex-row md:items-center\">\r\n      <div className=\"grid gap-1\">\r\n        <h1 className=\"text-2xl font-bold tracking-tight md:text-3xl\">{title}</h1>\r\n        {description && (\r\n          <p className=\"text-muted-foreground\">{description}</p>\r\n        )}\r\n      </div>\r\n      {children && <div className=\"flex shrink-0 gap-2\">{children}</div>}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAMO,SAAS,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAmB;IAC1E,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAiD;;;;;;oBAC9D,6BACC,8OAAC;wBAAE,WAAU;kCAAyB;;;;;;;;;;;;YAGzC,0BAAY,8OAAC;gBAAI,WAAU;0BAAuB;;;;;;;;;;;;AAGzD","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/New%20folder/Inventory_Management/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/New%20folder/Inventory_Management/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Table = React.forwardRef<\r\n  HTMLTableElement,\r\n  React.HTMLAttributes<HTMLTableElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nTable.displayName = \"Table\"\r\n\r\nconst TableHeader = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n))\r\nTableHeader.displayName = \"TableHeader\"\r\n\r\nconst TableBody = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableBody.displayName = \"TableBody\"\r\n\r\nconst TableFooter = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tfoot\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableFooter.displayName = \"TableFooter\"\r\n\r\nconst TableRow = React.forwardRef<\r\n  HTMLTableRowElement,\r\n  React.HTMLAttributes<IHTMLTableRowElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableRow.displayName = \"TableRow\"\r\n\r\nconst TableHead = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.ThHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableHead.displayName = \"TableHead\"\r\n\r\nconst TableCell = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.TdHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCell.displayName = \"TableCell\"\r\n\r\nconst TableCaption = React.forwardRef<\r\n  HTMLTableCaptionElement,\r\n  React.HTMLAttributes<HTMLTableCaptionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <caption\r\n    ref={ref}\r\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCaption.displayName = \"TableCaption\"\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableCaption,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/New%20folder/Inventory_Management/src/ai/flows/generate-inventory-analysis.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview This file defines a Genkit flow for generating a comprehensive inventory analysis.\r\n *\r\n * - generateInventoryAnalysis - A function that generates a health report based on all inventory items.\r\n * - GenerateInventoryAnalysisInput - The input type for the function.\r\n * - GenerateInventoryAnalysisOutput - The return type for the function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateInventoryAnalysisInputSchema = z.object({\r\n  inventoryItems: z.array(\r\n    z.object({\r\n      itemId: z.string().describe('The unique identifier for the item.'),\r\n      itemName: z.string().describe('The name of the item.'),\r\n      currentQuantity: z.number().describe('The current quantity in stock.'),\r\n      reorderPoint: z.number().describe('The reorder point for the item.'),\r\n      averageDailySales: z\r\n        .number()\r\n        .describe('The average daily sales volume of the item.'),\r\n      sellingPrice: z.number().describe('The selling price of the item.'),\r\n      supplierName: z.string().describe('The name of the supplier.'),\r\n      leadTimeDays: z.number().describe('The lead time in days from the supplier.'),\r\n    })\r\n  ).describe('An array of all items in the inventory.'),\r\n});\r\nexport type GenerateInventoryAnalysisInput = z.infer<typeof GenerateInventoryAnalysisInputSchema>;\r\n\r\nconst ItemDetailSchema = z.object({\r\n  name: z.string().describe('The name of the item.'),\r\n  quantity: z.number().describe('The current quantity in stock.'),\r\n  price: z.number().describe('The selling price of the item.'),\r\n});\r\n\r\nconst GenerateInventoryAnalysisOutputSchema = z.object({\r\n  overallHealthScore: z.number().int().min(0).max(100).describe('A score from 0-100 representing the overall health of the inventory. 100 is perfect.'),\r\n  analysis: z.array(z.object({\r\n    title: z.string().describe('The title of the analysis section (e.g., \"Best Sellers\", \"Slow Movers\", \"Recommendations\").'),\r\n    points: z.array(z.string()).describe('A list of key observations or recommendations for this section.')\r\n  })).describe(\"A structured analysis of the inventory's health, broken down into key areas.\"),\r\n  lowStockItems: z.array(ItemDetailSchema).describe('A list of items with a quantity of 0, including their key attributes.'),\r\n  inStockItems: z.array(ItemDetailSchema).describe('A list of items with a quantity greater than 0, including their key attributes.')\r\n});\r\nexport type GenerateInventoryAnalysisOutput = z.infer<typeof GenerateInventoryAnalysisOutputSchema>;\r\n\r\nexport async function generateInventoryAnalysis(input: GenerateInventoryAnalysisInput): Promise<GenerateInventoryAnalysisOutput> {\r\n  return generateInventoryAnalysisFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateInventoryAnalysisPrompt',\r\n  input: {schema: GenerateInventoryAnalysisInputSchema},\r\n  output: {schema: GenerateInventoryAnalysisOutputSchema},\r\n  prompt: `You are a world-class AI inventory management consultant. Your task is to conduct a comprehensive health check of the entire inventory and provide a strategic analysis.\r\n\r\n  Analyze the provided data for all inventory items to generate a structured report. Your response must be highly professional, insightful, and strategic.\r\n\r\n  **1. Overall Health Score (0-100):**\r\n  Calculate a single health score for the entire inventory using the following weighted methodology. Base this on a holistic view:\r\n  - **Stock Levels (50% weight):** Are items appropriately stocked?\r\n      - For each item, calculate a stock level score (0-100). 100 is perfect (quantity is exactly at reorder point * 1.5).\r\n      - Penalize for being out-of-stock (score of 0).\r\n      - Penalize for significant overstock (e.g., quantity > 3 * reorder point).\r\n      - Average the scores for all items.\r\n  - **Sales Velocity (30% weight):** Are items selling well?\r\n      - Categorize items as \"Fast Mover\" (sells > 10 units/day), \"Medium Mover\" (1-10 units/day), \"Slow Mover\" (<1 unit/day).\r\n      - Calculate a score based on the distribution. A healthy inventory has a good mix, but a high percentage of slow-movers should lower the score. (e.g., % Fast * 100 + % Medium * 70 + % Slow * 30).\r\n  - **Risk (20% weight):**\r\n      - Identify items where the 'days until stockout' (quantity / avg daily sales) is less than the supplier lead time.\r\n      - The higher the percentage of items at risk of stocking out, the lower the score. (e.g., 100 - (% of at-risk items * 2)).\r\n  - Combine these weighted scores into a final health score from 0-100. A score below 50 indicates critical issues.\r\n\r\n  **2. Structured Analysis:**\r\n  Provide a breakdown of your findings into the following sections. For each section, provide a few bullet points highlighting the most important insights. Be concise and impactful.\r\n  - **Best Sellers:** Identify the top-performing items based on sales velocity and value. Comment on their stock levels. Are they well-managed?\r\n  - **Slow Movers:** Identify items with low sales velocity or those that are significantly overstocked (quantity far exceeds reorder point and sales rate).\r\n  - **Recommendations:** Based on your analysis, provide a list of strategic recommendations to improve inventory health. Examples: \"Consider a promotional campaign for [Slow Mover Item Name]\", \"Urgently re-order [Critical Low Stock Item Name]\", \"Increase reorder point for [Best Seller Name] to avoid stockouts.\"\r\n\r\n  **3. Item Lists:**\r\n  - **Low Stock Items:** Populate the 'lowStockItems' array with all items that have a current quantity of 0. Include their name, quantity, and price.\r\n  - **In-Stock Items:** Populate the 'inStockItems' array with all items that have a current quantity greater than 0. Include their name, quantity, and price.\r\n\r\n\r\n  Here is the data for all inventory items:\r\n\r\n  {{#each inventoryItems}}\r\n  - Item: {{itemName}} (ID: {{itemId}})\r\n    - Current Quantity: {{currentQuantity}}\r\n    - Re-order Point: {{reorderPoint}}\r\n    - Avg. Daily Sales: {{averageDailySales}}\r\n    - Selling Price: $ {{sellingPrice}}\r\n    - Supplier: {{supplierName}}\r\n    - Lead Time: {{leadTimeDays}} days\r\n  {{/each}}\r\n\r\n  Based on this complete data set, generate the comprehensive inventory health analysis.\r\n  `,\r\n});\r\n\r\nconst generateInventoryAnalysisFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateInventoryAnalysisFlow',\r\n    inputSchema: GenerateInventoryAnalysisInputSchema,\r\n    outputSchema: GenerateInventoryAnalysisOutputSchema,\r\n  },\r\n  async input => {\r\n    // Log the input before sending it to the prompt\r\n    console.log('Input for generateInventoryAnalysisFlow:', JSON.stringify(input, null, 2));\r\n\r\n    const {output} = await prompt(input);\r\n\r\n    // Log the output received from the prompt\r\n    console.log('Output from generateInventoryAnalysisFlow:', JSON.stringify(output, null, 2));\r\n\r\n    return output!;\r\n  }\r\n);"],"names":[],"mappings":";;;;;;IAgDsB,4BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/New%20folder/Inventory_Management/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\r\n\r\nfunction Skeleton({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  return (\r\n    <div\r\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Skeleton }\r\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/New%20folder/Inventory_Management/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst alertVariants = cva(\r\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-background text-foreground\",\r\n        destructive:\r\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Alert = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\r\n>(({ className, variant, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    role=\"alert\"\r\n    className={cn(alertVariants({ variant }), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlert.displayName = \"Alert\"\r\n\r\nconst AlertTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h5\r\n    ref={ref}\r\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertTitle.displayName = \"AlertTitle\"\r\n\r\nconst AlertDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDescription.displayName = \"AlertDescription\"\r\n\r\nexport { Alert, AlertTitle, AlertDescription }\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/New%20folder/Inventory_Management/src/app/dashboard/reports/page.tsx"],"sourcesContent":["\r\n\"use client\";\r\n\r\nimport * as React from 'react';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport { format } from 'date-fns';\r\nimport { PageHeader } from \"@/components/page-header\";\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, TableFooter } from \"@/components/ui/table\";\r\nimport { Button } from '@/components/ui/button';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { ChevronDown, FileDown } from 'lucide-react';\r\nimport type { Item, Category, SoldItem } from \"@/types\";\r\nimport { generateInventoryAnalysis, type GenerateInventoryAnalysisOutput } from '@/ai/flows/generate-inventory-analysis';\r\nimport { getItems, getCategories, getSoldItems } from '@/lib/data';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\r\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\r\nimport { PDFDocument } from 'pdf-lib';\r\n\r\nexport default function ReportsPage()\r\n{\r\n    const [items, setItems] = React.useState<Item[]>([]);\r\n    const [categories, setCategories] = React.useState<Category[]>([]);\r\n    const [soldItems, setSoldItems] = React.useState<SoldItem[]>([]);\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [isGenerating, setIsGenerating] = React.useState(false);\r\n    const [aiReport, setAiReport] = React.useState<GenerateInventoryAnalysisOutput | null>(null);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n    const [retryCount, setRetryCount] = React.useState(0);\r\n    const pdfPassword = \"Inventory_Management_System\";\r\n\r\n    React.useEffect(() => {\r\n        setItems(getItems());\r\n        setCategories(getCategories());\r\n        setSoldItems(getSoldItems());\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    const fetchAiReport = React.useCallback(async () => {\r\n        if (items.length === 0)\r\n        {\r\n            setAiReport(null);\r\n            setIsGenerating(false);\r\n            return;\r\n        }\r\n\r\n        setIsGenerating(true);\r\n        setError(null);\r\n        try\r\n        {\r\n            const reportInput = {\r\n                inventoryItems: items.map(item => ({\r\n                    itemId: item.id,\r\n                    itemName: item.name,\r\n                    currentQuantity: item.quantity,\r\n                    reorderPoint: item.reorderPoint,\r\n                    averageDailySales: item.averageDailySales,\r\n                    sellingPrice: item.price,\r\n                    supplierName: item.supplierName,\r\n                    leadTimeDays: item.leadTimeDays,\r\n                })),\r\n            };\r\n\r\n            const result = await generateInventoryAnalysis(reportInput);\r\n            setAiReport(result);\r\n        }\r\n        catch (e: any)\r\n        {\r\n            console.error('Error generating AI health report:', e);\r\n            const errorMessage = e.message || '';\r\n            if (errorMessage.includes('429') || errorMessage.includes('503')) {\r\n                setError('The AI service is currently busy or rate-limited. Retrying automatically in 5 seconds...');\r\n                setTimeout(() => setRetryCount(prev => prev + 1), 5000);\r\n            }\r\n            else\r\n            {\r\n                setError('An unexpected error occurred while generating the AI report. Some features may be unavailable.');\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            setIsGenerating(false);\r\n        }\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [items, retryCount]);\r\n\r\n    React.useEffect(() => {\r\n        if (!isLoading && items.length > 0)\r\n        {\r\n            fetchAiReport();\r\n        }\r\n    }, [isLoading, items, fetchAiReport]);\r\n\r\n\r\n    const lowStockItems = items.filter(item => item.quantity === 0);\r\n    const inStockItems = items.filter(item => item.quantity > 0);\r\n    const totalRevenue = soldItems.reduce((sum, item) => sum + item.price * item.quantitySold, 0);\r\n\r\n    const encryptAndSavePdf = async (pdfBytes: Uint8Array, fileName: string) => {\r\n        const pdfDoc = await PDFDocument.load(pdfBytes);\r\n        const encryptedPdfBytes = await pdfDoc.save({\r\n            userPassword: pdfPassword,\r\n            ownerPassword: pdfPassword,\r\n            permissions: {\r\n                printing: 'highResolution',\r\n                modifying: false,\r\n                copying: true,\r\n                annotating: false,\r\n                fillingForms: false,\r\n                contentAccessibility: true,\r\n                documentAssembly: false,\r\n            },\r\n        });\r\n\r\n        const blob = new Blob([encryptedPdfBytes], { type: 'application/pdf' });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = fileName;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(link.href);\r\n    };\r\n\r\n    const setupPdfDoc = (doc: jsPDF) => {\r\n        const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.get(\"height\");\r\n        const pageWidth = doc.internal.pageSize.width || doc.internal.pageSize.get(\"width\");\r\n        const reportDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\r\n        const margin = 14;\r\n        \r\n        const header = (data: any) => {\r\n            doc.setFontSize(18);\r\n            doc.setFont('helvetica', 'bold');\r\n            doc.setTextColor('#0C7FF2');\r\n            doc.text(\"Inventory Manager\", margin, 22);\r\n            \r\n            doc.setFontSize(10);\r\n            doc.setFont('helvetica', 'normal');\r\n            doc.setTextColor('#333333');\r\n            doc.text(`Report Generated: ${reportDate}`, pageWidth - margin, 22, { align: 'right' });\r\n            \r\n            doc.setLineWidth(0.5);\r\n            doc.setDrawColor('#0C7FF2');\r\n            doc.line(margin, 28, pageWidth - margin, 28);\r\n        };\r\n\r\n        const addWatermark = (docInstance: jsPDF) => {\r\n            const totalPages = (docInstance as any).internal.getNumberOfPages();\r\n            for (let i = 1; i <= totalPages; i++)\r\n            {\r\n                docInstance.setPage(i);\r\n                docInstance.saveGraphicsState();\r\n                docInstance.setFont('helvetica', 'bold');\r\n                docInstance.setFontSize(72);\r\n                docInstance.setTextColor('#000000');\r\n                docInstance.setGState(new (docInstance as any).GState({ opacity: 0.05 }));\r\n                docInstance.text(\"Confidential\", pageWidth / 2, pageHeight / 2, {\r\n                    angle: -45,\r\n                    align: 'center'\r\n                });\r\n                docInstance.restoreGraphicsState();\r\n            }\r\n        };\r\n\r\n        const addPageNumbers = (docInstance: jsPDF) => {\r\n            const pageCount = (docInstance as any).internal.getNumberOfPages();\r\n            for (let i = 1; i <= pageCount; i++)\r\n            {\r\n                docInstance.setPage(i);\r\n                addWatermark(docInstance);\r\n                docInstance.setFontSize(8);\r\n                docInstance.setTextColor('#888888');\r\n                docInstance.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });\r\n            }\r\n        };\r\n\r\n        return { header, addPageNumbers, margin, pageWidth, pageHeight };\r\n    };\r\n\r\n    const exportLowStockPDF = async () => {\r\n        const doc = new jsPDF();\r\n        const { header, addPageNumbers, margin, pageWidth } = setupPdfDoc(doc);\r\n        \r\n        autoTable(doc, {\r\n            head: [['Item Name', 'SKU', 'Re-order Point', 'Supplier']],\r\n            body: lowStockItems.map(item => [item.name, item.sku, item.reorderPoint, item.supplierName]),\r\n            theme: 'striped',\r\n            headStyles: { fillColor: [12, 127, 242] },\r\n            didDrawPage: (data) => {\r\n                header(data);\r\n                doc.setFontSize(18);\r\n                doc.setFont('helvetica', 'bold');\r\n                doc.text(\"Low Stock Report\", margin, 40);\r\n                const lowStockText = `The following items have a quantity of 0 and require immediate attention.`;\r\n                const splitLowStockText = doc.splitTextToSize(lowStockText, pageWidth - margin * 2);\r\n                doc.setFontSize(12);\r\n                doc.setFont('helvetica', 'normal');\r\n                doc.text(splitLowStockText, margin, 50);\r\n            },\r\n            startY: 60,\r\n            margin: { top: 35, left: margin, right: margin }\r\n        });\r\n\r\n        addPageNumbers(doc);\r\n        const pdfBytes = doc.output('arraybuffer');\r\n        await encryptAndSavePdf(new Uint8Array(pdfBytes), `low-stock-report-${new Date().toISOString().split('T')[0]}.pdf`);\r\n    };\r\n\r\n    const exportLowStockExcel = () => {\r\n        const wb = XLSX.utils.book_new();\r\n        const ws_low_stock = XLSX.utils.json_to_sheet(lowStockItems.map(item => ({\r\n            Name: item.name,\r\n            SKU: item.sku,\r\n            Quantity: item.quantity,\r\n            'Re-order Point': item.reorderPoint,\r\n            'Supplier Name': item.supplierName\r\n        })));\r\n        XLSX.utils.book_append_sheet(wb, ws_low_stock, \"Low Stock Items\");\r\n        XLSX.writeFile(wb, `low-stock-report-${new Date().toISOString().split('T')[0]}.xlsx`);\r\n    };\r\n\r\n    const exportFullInventoryPDF = async () => {\r\n        const doc = new jsPDF();\r\n        const { header, addPageNumbers, margin, pageWidth } = setupPdfDoc(doc);\r\n        \r\n        autoTable(doc, {\r\n            head: [['Item Name', 'SKU', 'Category', 'Quantity', 'Unit Price']],\r\n            body: items.map(item => [item.name, item.sku, categories.find(c => c.id === item.categoryId)?.name || 'N/A', item.quantity, `$${item.price.toFixed(2)}`]),\r\n            theme: 'striped',\r\n            headStyles: { fillColor: [12, 127, 242] },\r\n            didDrawPage: (data) => {\r\n                header(data);\r\n                doc.setFontSize(18);\r\n                doc.setFont('helvetica', 'bold');\r\n                doc.text(\"Full Inventory Report\", margin, 40);\r\n                const fullInvText = `A complete list of all items currently in the inventory, including stock levels and pricing.`;\r\n                const splitFullInvText = doc.splitTextToSize(fullInvText, pageWidth - margin * 2);\r\n                doc.setFontSize(12);\r\n                doc.setFont('helvetica', 'normal');\r\n                doc.text(splitFullInvText, margin, 50);\r\n            },\r\n            startY: 60,\r\n            margin: { top: 35, left: margin, right: margin }\r\n        });\r\n        \r\n        addPageNumbers(doc);\r\n        const pdfBytes = doc.output('arraybuffer');\r\n        await encryptAndSavePdf(new Uint8Array(pdfBytes), `full-inventory-report-${new Date().toISOString().split('T')[0]}.pdf`);\r\n    };\r\n\r\n    const exportFullInventoryExcel = () => {\r\n        const wb = XLSX.utils.book_new();\r\n        const ws_inventory = XLSX.utils.json_to_sheet(items.map(item => ({\r\n            Name: item.name,\r\n            SKU: item.sku,\r\n            Category: categories.find(c => c.id === item.categoryId)?.name || 'N/A',\r\n            Quantity: item.quantity,\r\n            Price: item.price,\r\n            'Re-order Point': item.reorderPoint,\r\n            'Supplier Name': item.supplierName\r\n        })));\r\n        XLSX.utils.book_append_sheet(wb, ws_inventory, \"Full Inventory\");\r\n        XLSX.writeFile(wb, `full-inventory-report-${new Date().toISOString().split('T')[0]}.xlsx`);\r\n    };\r\n\r\n    const exportSoldItemsPDF = async () => {\r\n        const doc = new jsPDF();\r\n        const { header, addPageNumbers, margin, pageWidth } = setupPdfDoc(doc);\r\n        \r\n        autoTable(doc, {\r\n            head: [['Item Name', 'SKU', 'Qty Sold', 'Unit Price', 'Total Revenue', 'Date Sold']],\r\n            body: soldItems.map(item => [\r\n                item.name, \r\n                item.sku, \r\n                item.quantitySold, \r\n                `$${item.price.toFixed(2)}`,\r\n                `$${(item.price * item.quantitySold).toFixed(2)}`,\r\n                format(new Date(item.dateSold), 'PPP')\r\n            ]),\r\n            foot: [\r\n                [{ content: 'Total Revenue', colSpan: 4, styles: { halign: 'right', fontStyle: 'bold' } }, \r\n                { content: `$${totalRevenue.toFixed(2)}`, styles: { fontStyle: 'bold' } }, \r\n                '']\r\n            ],\r\n            theme: 'striped',\r\n            headStyles: { fillColor: [12, 127, 242] },\r\n            footStyles: { fillColor: [248, 250, 252], textColor: [0,0,0] },\r\n            didDrawPage: (data) => {\r\n                header(data);\r\n                doc.setFontSize(18);\r\n                doc.setFont('helvetica', 'bold');\r\n                doc.text(\"Sold Items Report\", margin, 40);\r\n                const introText = `A complete history of all sold items.`;\r\n                const splitIntroText = doc.splitTextToSize(introText, pageWidth - margin * 2);\r\n                doc.setFontSize(12);\r\n                doc.setFont('helvetica', 'normal');\r\n                doc.text(splitIntroText, margin, 50);\r\n            },\r\n            startY: 60,\r\n            margin: { top: 35, left: margin, right: margin }\r\n        });\r\n        \r\n        addPageNumbers(doc);\r\n        const pdfBytes = doc.output('arraybuffer');\r\n        await encryptAndSavePdf(new Uint8Array(pdfBytes), `sold-items-report-${new Date().toISOString().split('T')[0]}.pdf`);\r\n    };\r\n\r\n    const exportSoldItemsExcel = () => {\r\n        const wb = XLSX.utils.book_new();\r\n        const soldData = soldItems.map(item => ({\r\n            'Item Name': item.name,\r\n            'SKU': item.sku,\r\n            'Quantity Sold': item.quantitySold,\r\n            'Price per Item': item.price,\r\n            'Total Revenue': item.price * item.quantitySold,\r\n            'Date Sold': format(new Date(item.dateSold), 'PPP')\r\n        }));\r\n\r\n        const ws = XLSX.utils.json_to_sheet(soldData);\r\n\r\n        XLSX.utils.sheet_add_aoa(ws, [\r\n            [\"\", \"\", \"\", \"Total Revenue\", totalRevenue]\r\n        ], { origin: -1 });\r\n\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Sold Items\");\r\n        XLSX.writeFile(wb, `sold-items-report-${new Date().toISOString().split('T')[0]}.xlsx`);\r\n    };\r\n\r\n    const exportConsolidatedPDF = async () => {\r\n        if (isGenerating || (!aiReport && !error && items.length > 0)) return; \r\n        setIsGenerating(true);\r\n        const doc = new jsPDF();\r\n        const { header, addPageNumbers, margin, pageWidth, pageHeight } = setupPdfDoc(doc);\r\n        let finalY = 0;\r\n\r\n        const pageSetup = (data: any) => {\r\n            header(data);\r\n            finalY = data.cursor?.y || 0;\r\n        };\r\n        \r\n        // --- Title Page ---\r\n        header({} as any);\r\n        doc.setFontSize(26);\r\n        doc.setFont('helvetica', 'bold');\r\n        doc.setTextColor('#0C7FF2');\r\n        doc.text(\"Comprehensive Inventory Analysis\", margin, 40);\r\n        \r\n        doc.setFontSize(12);\r\n        doc.setFont('helvetica', 'normal');\r\n        doc.setTextColor('#333333');\r\n        const summaryText = `This report provides a holistic overview of the inventory status, including an AI-powered health analysis, stock level visualizations, detailed item lists, and actionable insights.`;\r\n        const splitSummary = doc.splitTextToSize(summaryText, pageWidth - margin * 2);\r\n        doc.text(splitSummary, margin, 55);\r\n\r\n        let currentY = 80;\r\n\r\n        doc.setFontSize(16);\r\n        doc.setFont('helvetica', 'bold');\r\n        doc.text(\"Stock Levels: Top 10 Items by Quantity\", margin, currentY);\r\n        currentY += 15;\r\n\r\n        // --- Stock Level Chart ---\r\n        const chartData = [...items].sort((a, b) => b.quantity - a.quantity).slice(0, 10);\r\n        if (chartData.length > 0)\r\n        {\r\n            const chartX = margin + 10;\r\n            const chartStartY = currentY;\r\n            const chartHeight = 80;\r\n            const chartWidth = pageWidth - (margin * 2) - 20;\r\n            \r\n            const maxQuantity = Math.max(...chartData.map(d => d.quantity), 0);\r\n            const barWidth = chartWidth / (chartData.length * 2);\r\n    \r\n            // Draw Chart Axes\r\n            doc.setDrawColor(\"#cccccc\");\r\n            doc.line(chartX, chartStartY + chartHeight, chartX, chartStartY - 5); // Y-axis\r\n            doc.line(chartX, chartStartY + chartHeight, chartX + chartWidth, chartStartY + chartHeight); // X-axis\r\n            \r\n            // Draw Bars and Labels\r\n            doc.setFontSize(7);\r\n            doc.setTextColor('#333333');\r\n            chartData.forEach((item, index) => {\r\n                const barHeight = maxQuantity > 0 ? (item.quantity / maxQuantity) * chartHeight : 0;\r\n                const barX = chartX + (index * 2 + 0.5) * barWidth;\r\n                \r\n                doc.setFillColor(12, 127, 242);\r\n                doc.rect(barX, chartStartY + chartHeight - barHeight, barWidth, barHeight, 'F');\r\n                \r\n                doc.text(item.name.slice(0,12), barX + barWidth / 2, chartStartY + chartHeight + 4, { align: 'right', angle: -45 });\r\n            });\r\n            \r\n            // Y-axis labels and gridlines\r\n            doc.setFontSize(8);\r\n            doc.setDrawColor(\"#e0e0e0\");\r\n            for (let i = 0; i <= 5; i++)\r\n            {\r\n                const value = Math.round((maxQuantity / 5) * i);\r\n                const yPos = chartStartY + chartHeight - ((value / maxQuantity) * chartHeight);\r\n                doc.text(value.toString(), chartX - 4, yPos + 3, { align: 'right' });\r\n                doc.line(chartX + 1, yPos, chartX + chartWidth, yPos);\r\n            }\r\n        }\r\n        \r\n        // --- AI Health Report Section ---\r\n        if (aiReport && items.length > 0)\r\n        {\r\n            doc.addPage();\r\n            header({} as any);\r\n            doc.setFontSize(18);\r\n            doc.setFont('helvetica', 'bold');\r\n            doc.text(\"AI Inventory Health\", margin, 40);\r\n            \r\n            finalY = 50;\r\n\r\n            doc.setFontSize(12);\r\n            doc.setFont('helvetica', 'bold');\r\n            doc.text(\"Overall Health Score:\", margin, finalY);\r\n            doc.setFont('helvetica', 'normal');\r\n            doc.text(`${aiReport.overallHealthScore} / 100`, margin + 45, finalY);\r\n            finalY += 10;\r\n            \r\n            aiReport.analysis.forEach(section => {\r\n                if (finalY + 10 > pageHeight - 30)\r\n                {\r\n                    doc.addPage();\r\n                    header({} as any);\r\n                    finalY = 40;\r\n                }\r\n                doc.setFontSize(14);\r\n                doc.setFont('helvetica', 'bold');\r\n                doc.text(section.title, margin, finalY);\r\n                finalY += 6;\r\n                \r\n                doc.setFontSize(10);\r\n                doc.setFont('helvetica', 'normal');\r\n                section.points.forEach(point => {\r\n                    const splitText = doc.splitTextToSize(`• ${point}`, pageWidth - (margin * 2) - 4);\r\n                    if (finalY + (splitText.length * 5) > pageHeight - 30)\r\n                    {\r\n                        doc.addPage();\r\n                        header({} as any);\r\n                        finalY = 40;\r\n                    }\r\n                    doc.text(splitText, margin + 4, finalY);\r\n                    finalY += (splitText.length * 5);\r\n                });\r\n                finalY += 4;\r\n            });\r\n            \r\n            if (aiReport.lowStockItems && aiReport.lowStockItems.length > 0)\r\n            {\r\n                if (finalY > (pageHeight - 50))\r\n                {\r\n                    doc.addPage();\r\n                    header({} as any);\r\n                    finalY = 40;\r\n                }\r\n                finalY += 5;\r\n                autoTable(doc, {\r\n                    head: [['Low Stock Item', 'Quantity', 'Price']],\r\n                    body: aiReport.lowStockItems.map(i => [i.name, i.quantity, `$${i.price.toFixed(2)}`]),\r\n                    startY: finalY,\r\n                    theme: 'striped',\r\n                    headStyles: { fillColor: [220, 53, 69] },\r\n                    didDrawPage: (data) => pageSetup(data),\r\n                    margin: { top: 35, left: margin, right: margin }\r\n                });\r\n                finalY = (doc as any).lastAutoTable.finalY + 5;\r\n            }\r\n\r\n            if (aiReport.inStockItems && aiReport.inStockItems.length > 0)\r\n            {\r\n                if (finalY > (pageHeight - 50))\r\n                {\r\n                    doc.addPage();\r\n                    header({} as any);\r\n                    finalY = 40;\r\n                }\r\n                autoTable(doc, {\r\n                    head: [['In-Stock Item', 'Quantity', 'Price']],\r\n                    body: aiReport.inStockItems.map(i => [i.name, i.quantity, `$${i.price.toFixed(2)}`]),\r\n                    startY: finalY,\r\n                    theme: 'striped',\r\n                    headStyles: { fillColor: [40, 167, 69] },\r\n                    didDrawPage: pageSetup,\r\n                    margin: { top: 35, left: margin, right: margin }\r\n                });\r\n                finalY = (doc as any).lastAutoTable.finalY;\r\n            }\r\n        }\r\n\r\n        // --- Low Stock Report Section ---\r\n        doc.addPage();\r\n        header({} as any);\r\n        autoTable(doc, {\r\n            head: [['Item Name', 'SKU', 'Re-order Point', 'Supplier']],\r\n            body: lowStockItems.map(item => [item.name, item.sku, item.reorderPoint, item.supplierName]),\r\n            theme: 'striped',\r\n            headStyles: { fillColor: [12, 127, 242] },\r\n            didDrawPage: (data) => {\r\n                header(data);\r\n                doc.setFontSize(18);\r\n                doc.setFont('helvetica', 'bold');\r\n                doc.text(\"Low Stock Report\", margin, 40);\r\n                doc.setFontSize(12);\r\n                doc.setFont('helvetica', 'normal');\r\n                const lowStockText = `The following items have a quantity of 0 and require immediate attention.`;\r\n                const splitLowStockText = doc.splitTextToSize(lowStockText, pageWidth - margin * 2);\r\n                doc.text(splitLowStockText, margin, 50);\r\n            },\r\n            startY: 60,\r\n            margin: { top: 35, left: margin, right: margin }\r\n        });\r\n\r\n        // --- Full Inventory Report Section ---\r\n        doc.addPage();\r\n        header({} as any);\r\n        autoTable(doc, {\r\n            head: [['Item Name', 'SKU', 'Category', 'Quantity', 'Unit Price']],\r\n            body: items.map(item => [item.name, item.sku, categories.find(c => c.id === item.categoryId)?.name || 'N/A', item.quantity, `$${item.price.toFixed(2)}`]),\r\n            theme: 'striped',\r\n            headStyles: { fillColor: [12, 127, 242] },\r\n            didDrawPage: (data) => {\r\n                header(data);\r\n                doc.setFontSize(18);\r\n                doc.setFont('helvetica', 'bold');\r\n                doc.text(\"Full Inventory Report\", margin, 40);\r\n                doc.setFontSize(12);\r\n                doc.setFont('helvetica', 'normal');\r\n                const fullInvText = `A complete list of all items currently in the inventory, including stock levels and pricing.`;\r\n                const splitFullInvText = doc.splitTextToSize(fullInvText, pageWidth - margin * 2);\r\n                doc.text(splitFullInvText, margin, 50);\r\n            },\r\n            startY: 60,\r\n            margin: { top: 35, left: margin, right: margin }\r\n        });\r\n\r\n        // --- Sold Items Report Section ---\r\n        doc.addPage();\r\n        header({} as any);\r\n        autoTable(doc, {\r\n            head: [['Item Name', 'SKU', 'Qty Sold', 'Unit Price', 'Total Revenue', 'Date Sold']],\r\n            body: soldItems.map(item => [\r\n                item.name, \r\n                item.sku, \r\n                item.quantitySold, \r\n                `$${item.price.toFixed(2)}`,\r\n                `$${(item.price * item.quantitySold).toFixed(2)}`,\r\n                format(new Date(item.dateSold), 'PPP')\r\n            ]),\r\n            foot: [\r\n                [{ content: 'Total Revenue', colSpan: 4, styles: { halign: 'right', fontStyle: 'bold' } }, \r\n                { content: `$${totalRevenue.toFixed(2)}`, styles: { fontStyle: 'bold' } }, \r\n                '']\r\n            ],\r\n            theme: 'striped',\r\n            headStyles: { fillColor: [12, 127, 242] },\r\n            footStyles: { fillColor: [248, 250, 252], textColor: [0,0,0] },\r\n            didDrawPage: (data) => {\r\n                header(data);\r\n                doc.setFontSize(18);\r\n                doc.setFont('helvetica', 'bold');\r\n                doc.text(\"Sold Items Report\", margin, 40);\r\n                doc.setFontSize(12);\r\n                doc.setFont('helvetica', 'normal');\r\n                const soldItemsText = `A log of all items sold.`;\r\n                const splitSoldItemsText = doc.splitTextToSize(soldItemsText, pageWidth - margin * 2);\r\n                doc.text(splitSoldItemsText, margin, 50);\r\n            },\r\n            startY: 60,\r\n            margin: { top: 35, left: margin, right: margin }\r\n        });\r\n\r\n        addPageNumbers(doc);\r\n        const pdfBytes = doc.output('arraybuffer');\r\n        await encryptAndSavePdf(new Uint8Array(pdfBytes), `consolidated-inventory-report-${new Date().toISOString().split('T')[0]}.pdf`);\r\n        setIsGenerating(false);\r\n    };\r\n\r\n    const exportConsolidatedExcel = () => {\r\n        const wb = XLSX.utils.book_new();\r\n\r\n        // Low Stock Items Sheet\r\n        const ws_low_stock = XLSX.utils.json_to_sheet(lowStockItems.map(item => ({\r\n            Name: item.name,\r\n            SKU: item.sku,\r\n            Quantity: item.quantity,\r\n            'Re-order Point': item.reorderPoint,\r\n            'Supplier Name': item.supplierName\r\n        })));\r\n        XLSX.utils.book_append_sheet(wb, ws_low_stock, \"Low Stock Items\");\r\n\r\n        // Full Inventory Sheet\r\n        const ws_inventory = XLSX.utils.json_to_sheet(items.map(item => ({\r\n            Name: item.name,\r\n            SKU: item.sku,\r\n            Category: categories.find(c => c.id === item.categoryId)?.name || 'N/A',\r\n            Quantity: item.quantity,\r\n            Price: item.price,\r\n            'Re-order Point': item.reorderPoint,\r\n            'Supplier Name': item.supplierName\r\n        })));\r\n        XLSX.utils.book_append_sheet(wb, ws_inventory, \"Full Inventory\");\r\n        \r\n        // In Stock Items Sheet\r\n        const ws_in_stock = XLSX.utils.json_to_sheet(inStockItems.map(item => ({\r\n            Name: item.name,\r\n            SKU: item.sku,\r\n            Category: categories.find(c => c.id === item.categoryId)?.name || 'N/A',\r\n            Quantity: item.quantity,\r\n            Price: item.price\r\n        })));\r\n        XLSX.utils.book_append_sheet(wb, ws_in_stock, \"In-Stock Items\");\r\n\r\n        // Sold Items Sheet\r\n        const soldData = soldItems.map(item => ({\r\n            'Item Name': item.name,\r\n            'SKU': item.sku,\r\n            'Quantity Sold': item.quantitySold,\r\n            'Price per Item': item.price,\r\n            'Total Revenue': item.price * item.quantitySold,\r\n            'Date Sold': format(new Date(item.dateSold), 'PPP')\r\n        }));\r\n        const ws_sold_items = XLSX.utils.json_to_sheet(soldData);\r\n        XLSX.utils.sheet_add_aoa(ws_sold_items, [\r\n            [\"\", \"\", \"\", \"Total Revenue\", totalRevenue]\r\n        ], { origin: -1 });\r\n        XLSX.utils.book_append_sheet(wb, ws_sold_items, \"Sold Items\");\r\n\r\n        // Categories Sheet\r\n        const ws_categories = XLSX.utils.json_to_sheet(categories.map(category => ({\r\n            Name: category.name,\r\n            Description: category.description || 'N/A',\r\n            'Item Count': category.itemCount\r\n        })));\r\n        XLSX.utils.book_append_sheet(wb, ws_categories, \"Categories\");\r\n\r\n        XLSX.writeFile(wb, `consolidated-inventory-report-${new Date().toISOString().split('T')[0]}.xlsx`);\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <>\r\n                <PageHeader\r\n                    title=\"Reports\"\r\n                    description=\"Generate and view inventory reports.\"\r\n                />\r\n                <div className=\"grid gap-6\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <CardTitle>Low Stock Report</CardTitle>\r\n                            <CardDescription>Items that are at or below their re-order point.</CardDescription>\r\n                        </CardHeader>\r\n                        <CardContent>\r\n                        <Skeleton className=\"h-20 w-full\" />\r\n                        </CardContent>\r\n                    </Card>\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <CardTitle>Full Inventory Report</CardTitle>\r\n                            <CardDescription>A complete list of all items in your inventory.</CardDescription>\r\n                        </CardHeader>\r\n                        <CardContent>\r\n                        <Skeleton className=\"h-20 w-full\" />\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                title=\"Reports\"\r\n                description=\"Generate and view inventory reports.\"\r\n            >\r\n                <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                        <Button variant=\"outline\" size=\"sm\" disabled={isGenerating || (!!error && !aiReport) || items.length === 0}>\r\n                            {isGenerating ? \"Generating...\" : \"Export Whole Report as...\"}\r\n                            <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n                        </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent>\r\n                        <DropdownMenuItem onClick={exportConsolidatedPDF} disabled={isGenerating || (!!error && !aiReport) || items.length === 0}>\r\n                            <FileDown className=\"mr-2 h-4 w-4\" />\r\n                            Export as PDF\r\n                        </DropdownMenuItem>\r\n                        <DropdownMenuItem onClick={exportConsolidatedExcel} disabled={isGenerating || items.length === 0}>\r\n                            <FileDown className=\"mr-2 h-4 w-4\" />\r\n                            Export as Excel\r\n                        </DropdownMenuItem>\r\n                    </DropdownMenuContent>\r\n                </DropdownMenu>\r\n            </PageHeader>\r\n            <div className=\"grid gap-6\">\r\n                {error && (\r\n                    <Alert variant=\"destructive\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                            {error.includes('Retrying') ? <RefreshCw className=\"h-4 w-4 animate-spin\" /> : <AlertTriangle className=\"h-4 w-4\" />}\r\n                            <AlertTitle>AI Analysis Unavailable</AlertTitle>\r\n                        </div>\r\n                        <AlertDescription>\r\n                            {error}\r\n                        </AlertDescription>\r\n                    </Alert>\r\n                )}\r\n                <Card>\r\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\r\n                        <div>\r\n                            <CardTitle>Low Stock Report</CardTitle>\r\n                            <CardDescription>Items that have a quantity of 0.</CardDescription>\r\n                        </div>\r\n                        <DropdownMenu>\r\n                            <DropdownMenuTrigger asChild>\r\n                                <Button variant=\"outline\" size=\"sm\">\r\n                                    Export as...\r\n                                    <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n                                </Button>\r\n                            </DropdownMenuTrigger>\r\n                            <DropdownMenuContent>\r\n                                <DropdownMenuItem onClick={exportLowStockPDF}>\r\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\r\n                                    Export as PDF\r\n                                </DropdownMenuItem>\r\n                                <DropdownMenuItem onClick={exportLowStockExcel}>\r\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\r\n                                    Export as Excel\r\n                                </DropdownMenuItem>\r\n                            </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <Table>\r\n                            <TableHeader>\r\n                                <TableRow>\r\n                                    <TableHead>Item</TableHead>\r\n                                    <TableHead>SKU</TableHead>\r\n                                    <TableHead className=\"text-right\">Quantity</TableHead>\r\n                                    <TableHead className=\"text-right\">Re-order Point</TableHead>\r\n                                </TableRow>\r\n                            </TableHeader>\r\n                            <TableBody>\r\n                                {lowStockItems.length > 0 ? lowStockItems.map(item => (\r\n                                    <TableRow key={item.id}>\r\n                                        <TableCell className=\"font-medium\">{item.name}</TableCell>\r\n                                        <TableCell>{item.sku}</TableCell>\r\n                                        <TableCell className=\"text-right\">{item.quantity}</TableCell>\r\n                                        <TableCell className=\"text-right\">{item.reorderPoint}</TableCell>\r\n                                    </TableRow>\r\n                                )) : (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={4} className=\"text-center\">\r\n                                            No items are currently low on stock.\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card>\r\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\r\n                        <div>\r\n                            <CardTitle>Sold Items Report</CardTitle>\r\n                            <CardDescription>A log of all items that have been sold.</CardDescription>\r\n                        </div>\r\n                        <DropdownMenu>\r\n                            <DropdownMenuTrigger asChild>\r\n                                <Button variant=\"outline\" size=\"sm\">\r\n                                    Export as...\r\n                                    <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n                                </Button>\r\n                            </DropdownMenuTrigger>\r\n                            <DropdownMenuContent>\r\n                                <DropdownMenuItem onClick={exportSoldItemsPDF}>\r\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\r\n                                    Export as PDF\r\n                                </DropdownMenuItem>\r\n                                <DropdownMenuItem onClick={exportSoldItemsExcel}>\r\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\r\n                                    Export as Excel\r\n                                </DropdownMenuItem>\r\n                            </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <Table>\r\n                            <TableHeader>\r\n                                <TableRow>\r\n                                    <TableHead>Item</TableHead>\r\n                                    <TableHead>SKU</TableHead>\r\n                                    <TableHead className=\"text-right\">Qty Sold</TableHead>\r\n                                    <TableHead className=\"text-right\">Total Revenue</TableHead>\r\n                                    <TableHead>Date Sold</TableHead>\r\n                                </TableRow>\r\n                            </TableHeader>\r\n                            <TableBody>\r\n                                {soldItems.length > 0 ? soldItems.map(item => (\r\n                                    <TableRow key={item.id}>\r\n                                        <TableCell className=\"font-medium\">{item.name}</TableCell>\r\n                                        <TableCell>{item.sku}</TableCell>\r\n                                        <TableCell className=\"text-right\">{item.quantitySold}</TableCell>\r\n                                        <TableCell className=\"text-right font-medium\">${(item.price * item.quantitySold).toFixed(2)}</TableCell>\r\n                                        <TableCell>{format(new Date(item.dateSold), 'PPP')}</TableCell>\r\n                                    </TableRow>\r\n                                )) : (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={5} className=\"text-center\">\r\n                                            No items have been sold yet.\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                            <TableFooter>\r\n                                <TableRow>\r\n                                    <TableCell colSpan={3} className=\"text-right font-bold\">Total Revenue</TableCell>\r\n                                    <TableCell className=\"text-right font-bold text-primary\">\r\n                                        {`$${totalRevenue.toFixed(2)}`}\r\n                                    </TableCell>\r\n                                    <TableCell />\r\n                                </TableRow>\r\n                            </TableFooter>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card>\r\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\r\n                        <div>\r\n                            <CardTitle>Full Inventory Report</CardTitle>\r\n                            <CardDescription>A complete list of all items in your inventory.</CardDescription>\r\n                        </div>\r\n                        <DropdownMenu>\r\n                            <DropdownMenuTrigger asChild>\r\n                                <Button variant=\"outline\" size=\"sm\">\r\n                                    Export as...\r\n                                    <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n                                </Button>\r\n                            </DropdownMenuTrigger>\r\n                            <DropdownMenuContent>\r\n                                <DropdownMenuItem onClick={exportFullInventoryPDF}>\r\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\r\n                                    Export as PDF\r\n                                </DropdownMenuItem>\r\n                                <DropdownMenuItem onClick={exportFullInventoryExcel}>\r\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\r\n                                    Export as Excel\r\n                                </DropdownMenuItem>\r\n                            </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                    <Table>\r\n                            <TableHeader>\r\n                                <TableRow>\r\n                                    <TableHead>Item</TableHead>\r\n                                    <TableHead>Category</TableHead>\r\n                                    <TableHead className=\"text-right\">Quantity</TableHead>\r\n                                    <TableHead className=\"text-right\">Price</TableHead>\r\n                                </TableRow>\r\n                            </TableHeader>\r\n                            <TableBody>\r\n                                {items.length > 0 ? items.map(item => (\r\n                                    <TableRow key={item.id}>\r\n                                        <TableCell className=\"font-medium\">{item.name}</TableCell>\r\n                                        <TableCell>{categories.find(c => c.id === item.categoryId)?.name || 'N/A'}</TableCell>\r\n                                        <TableCell className=\"text-right\">{item.quantity}</TableCell>\r\n                                        <TableCell className=\"text-right\">${item.price.toFixed(2)}</TableCell>\r\n                                    </TableRow>\r\n                                )) : (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={4} className=\"text-center\">\r\n                                            No items in inventory.\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    );\r\n}"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAnBA;;;;;;;;;;;;;;;;;;;AAqBe,SAAS;IAEpB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAU,EAAE;IACnD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAc,EAAE;IACjE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAc,EAAE;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IACvD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAA0C;IACvF,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAiB;IACxD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IACnD,MAAM,cAAc;IAEpB,CAAA,GAAA,qMAAA,CAAA,YAAe,AAAD,EAAE;QACZ,SAAS,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD;QAChB,cAAc,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD;QAC1B,aAAa,CAAA,GAAA,kHAAA,CAAA,eAAY,AAAD;QACxB,aAAa;IACjB,GAAG,EAAE;IAEL,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAiB,AAAD,EAAE;QACpC,IAAI,MAAM,MAAM,KAAK,GACrB;YACI,YAAY;YACZ,gBAAgB;YAChB;QACJ;QAEA,gBAAgB;QAChB,SAAS;QACT,IACA;YACI,MAAM,cAAc;gBAChB,gBAAgB,MAAM,GAAG,CAAC,CAAA,OAAQ,CAAC;wBAC/B,QAAQ,KAAK,EAAE;wBACf,UAAU,KAAK,IAAI;wBACnB,iBAAiB,KAAK,QAAQ;wBAC9B,cAAc,KAAK,YAAY;wBAC/B,mBAAmB,KAAK,iBAAiB;wBACzC,cAAc,KAAK,KAAK;wBACxB,cAAc,KAAK,YAAY;wBAC/B,cAAc,KAAK,YAAY;oBACnC,CAAC;YACL;YAEA,MAAM,SAAS,MAAM,CAAA,GAAA,0JAAA,CAAA,4BAAyB,AAAD,EAAE;YAC/C,YAAY;QAChB,EACA,OAAO,GACP;YACI,QAAQ,KAAK,CAAC,sCAAsC;YACpD,MAAM,eAAe,EAAE,OAAO,IAAI;YAClC,IAAI,aAAa,QAAQ,CAAC,UAAU,aAAa,QAAQ,CAAC,QAAQ;gBAC9D,SAAS;gBACT,WAAW,IAAM,cAAc,CAAA,OAAQ,OAAO,IAAI;YACtD,OAEA;gBACI,SAAS;YACb;QACJ,SAEA;YACI,gBAAgB;QACpB;IACF,uDAAuD;IACzD,GAAG;QAAC;QAAO;KAAW;IAEtB,CAAA,GAAA,qMAAA,CAAA,YAAe,AAAD,EAAE;QACZ,IAAI,CAAC,aAAa,MAAM,MAAM,GAAG,GACjC;YACI;QACJ;IACJ,GAAG;QAAC;QAAW;QAAO;KAAc;IAGpC,MAAM,gBAAgB,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,QAAQ,KAAK;IAC7D,MAAM,eAAe,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,QAAQ,GAAG;IAC1D,MAAM,eAAe,UAAU,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,KAAK,KAAK,GAAG,KAAK,YAAY,EAAE;IAE3F,MAAM,oBAAoB,OAAO,UAAsB;QACnD,MAAM,SAAS,MAAM,gMAAA,CAAA,cAAW,CAAC,IAAI,CAAC;QACtC,MAAM,oBAAoB,MAAM,OAAO,IAAI,CAAC;YACxC,cAAc;YACd,eAAe;YACf,aAAa;gBACT,UAAU;gBACV,WAAW;gBACX,SAAS;gBACT,YAAY;gBACZ,cAAc;gBACd,sBAAsB;gBACtB,kBAAkB;YACtB;QACJ;QAEA,MAAM,OAAO,IAAI,KAAK;YAAC;SAAkB,EAAE;YAAE,MAAM;QAAkB;QACrE,MAAM,OAAO,SAAS,aAAa,CAAC;QACpC,KAAK,IAAI,GAAG,IAAI,eAAe,CAAC;QAChC,KAAK,QAAQ,GAAG;QAChB,SAAS,IAAI,CAAC,WAAW,CAAC;QAC1B,KAAK,KAAK;QACV,SAAS,IAAI,CAAC,WAAW,CAAC;QAC1B,IAAI,eAAe,CAAC,KAAK,IAAI;IACjC;IAEA,MAAM,cAAc,CAAC;QACjB,MAAM,aAAa,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC7E,MAAM,YAAY,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC3E,MAAM,aAAa,IAAI,OAAO,kBAAkB,CAAC,SAAS;YAAE,MAAM;YAAW,OAAO;YAAQ,KAAK;QAAU;QAC3G,MAAM,SAAS;QAEf,MAAM,SAAS,CAAC;YACZ,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO,CAAC,aAAa;YACzB,IAAI,YAAY,CAAC;YACjB,IAAI,IAAI,CAAC,qBAAqB,QAAQ;YAEtC,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO,CAAC,aAAa;YACzB,IAAI,YAAY,CAAC;YACjB,IAAI,IAAI,CAAC,CAAC,kBAAkB,EAAE,YAAY,EAAE,YAAY,QAAQ,IAAI;gBAAE,OAAO;YAAQ;YAErF,IAAI,YAAY,CAAC;YACjB,IAAI,YAAY,CAAC;YACjB,IAAI,IAAI,CAAC,QAAQ,IAAI,YAAY,QAAQ;QAC7C;QAEA,MAAM,eAAe,CAAC;YAClB,MAAM,aAAa,AAAC,YAAoB,QAAQ,CAAC,gBAAgB;YACjE,IAAK,IAAI,IAAI,GAAG,KAAK,YAAY,IACjC;gBACI,YAAY,OAAO,CAAC;gBACpB,YAAY,iBAAiB;gBAC7B,YAAY,OAAO,CAAC,aAAa;gBACjC,YAAY,WAAW,CAAC;gBACxB,YAAY,YAAY,CAAC;gBACzB,YAAY,SAAS,CAAC,IAAI,AAAC,YAAoB,MAAM,CAAC;oBAAE,SAAS;gBAAK;gBACtE,YAAY,IAAI,CAAC,gBAAgB,YAAY,GAAG,aAAa,GAAG;oBAC5D,OAAO,CAAC;oBACR,OAAO;gBACX;gBACA,YAAY,oBAAoB;YACpC;QACJ;QAEA,MAAM,iBAAiB,CAAC;YACpB,MAAM,YAAY,AAAC,YAAoB,QAAQ,CAAC,gBAAgB;YAChE,IAAK,IAAI,IAAI,GAAG,KAAK,WAAW,IAChC;gBACI,YAAY,OAAO,CAAC;gBACpB,aAAa;gBACb,YAAY,WAAW,CAAC;gBACxB,YAAY,YAAY,CAAC;gBACzB,YAAY,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,YAAY,GAAG,aAAa,IAAI;oBAAE,OAAO;gBAAS;YACpG;QACJ;QAEA,OAAO;YAAE;YAAQ;YAAgB;YAAQ;YAAW;QAAW;IACnE;IAEA,MAAM,oBAAoB;QACtB,MAAM,MAAM,IAAI,mJAAA,CAAA,UAAK;QACrB,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,YAAY;QAElE,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;YACX,MAAM;gBAAC;oBAAC;oBAAa;oBAAO;oBAAkB;iBAAW;aAAC;YAC1D,MAAM,cAAc,GAAG,CAAC,CAAA,OAAQ;oBAAC,KAAK,IAAI;oBAAE,KAAK,GAAG;oBAAE,KAAK,YAAY;oBAAE,KAAK,YAAY;iBAAC;YAC3F,OAAO;YACP,YAAY;gBAAE,WAAW;oBAAC;oBAAI;oBAAK;iBAAI;YAAC;YACxC,aAAa,CAAC;gBACV,OAAO;gBACP,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,oBAAoB,QAAQ;gBACrC,MAAM,eAAe,CAAC,yEAAyE,CAAC;gBAChG,MAAM,oBAAoB,IAAI,eAAe,CAAC,cAAc,YAAY,SAAS;gBACjF,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,mBAAmB,QAAQ;YACxC;YACA,QAAQ;YACR,QAAQ;gBAAE,KAAK;gBAAI,MAAM;gBAAQ,OAAO;YAAO;QACnD;QAEA,eAAe;QACf,MAAM,WAAW,IAAI,MAAM,CAAC;QAC5B,MAAM,kBAAkB,IAAI,WAAW,WAAW,CAAC,iBAAiB,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;IACtH;IAEA,MAAM,sBAAsB;QACxB,MAAM,KAAK,6HAAA,CAAA,QAAU,CAAC,QAAQ;QAC9B,MAAM,eAAe,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,cAAc,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACrE,MAAM,KAAK,IAAI;gBACf,KAAK,KAAK,GAAG;gBACb,UAAU,KAAK,QAAQ;gBACvB,kBAAkB,KAAK,YAAY;gBACnC,iBAAiB,KAAK,YAAY;YACtC,CAAC;QACD,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,cAAc;QAC/C,CAAA,GAAA,6HAAA,CAAA,YAAc,AAAD,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;IACxF;IAEA,MAAM,yBAAyB;QAC3B,MAAM,MAAM,IAAI,mJAAA,CAAA,UAAK;QACrB,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,YAAY;QAElE,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;YACX,MAAM;gBAAC;oBAAC;oBAAa;oBAAO;oBAAY;oBAAY;iBAAa;aAAC;YAClE,MAAM,MAAM,GAAG,CAAC,CAAA,OAAQ;oBAAC,KAAK,IAAI;oBAAE,KAAK,GAAG;oBAAE,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,UAAU,GAAG,QAAQ;oBAAO,KAAK,QAAQ;oBAAE,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI;iBAAC;YACxJ,OAAO;YACP,YAAY;gBAAE,WAAW;oBAAC;oBAAI;oBAAK;iBAAI;YAAC;YACxC,aAAa,CAAC;gBACV,OAAO;gBACP,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,yBAAyB,QAAQ;gBAC1C,MAAM,cAAc,CAAC,4FAA4F,CAAC;gBAClH,MAAM,mBAAmB,IAAI,eAAe,CAAC,aAAa,YAAY,SAAS;gBAC/E,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,kBAAkB,QAAQ;YACvC;YACA,QAAQ;YACR,QAAQ;gBAAE,KAAK;gBAAI,MAAM;gBAAQ,OAAO;YAAO;QACnD;QAEA,eAAe;QACf,MAAM,WAAW,IAAI,MAAM,CAAC;QAC5B,MAAM,kBAAkB,IAAI,WAAW,WAAW,CAAC,sBAAsB,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;IAC3H;IAEA,MAAM,2BAA2B;QAC7B,MAAM,KAAK,6HAAA,CAAA,QAAU,CAAC,QAAQ;QAC9B,MAAM,eAAe,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAA,OAAQ,CAAC;gBAC7D,MAAM,KAAK,IAAI;gBACf,KAAK,KAAK,GAAG;gBACb,UAAU,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,UAAU,GAAG,QAAQ;gBAClE,UAAU,KAAK,QAAQ;gBACvB,OAAO,KAAK,KAAK;gBACjB,kBAAkB,KAAK,YAAY;gBACnC,iBAAiB,KAAK,YAAY;YACtC,CAAC;QACD,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,cAAc;QAC/C,CAAA,GAAA,6HAAA,CAAA,YAAc,AAAD,EAAE,IAAI,CAAC,sBAAsB,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;IAC7F;IAEA,MAAM,qBAAqB;QACvB,MAAM,MAAM,IAAI,mJAAA,CAAA,UAAK;QACrB,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,YAAY;QAElE,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;YACX,MAAM;gBAAC;oBAAC;oBAAa;oBAAO;oBAAY;oBAAc;oBAAiB;iBAAY;aAAC;YACpF,MAAM,UAAU,GAAG,CAAC,CAAA,OAAQ;oBACxB,KAAK,IAAI;oBACT,KAAK,GAAG;oBACR,KAAK,YAAY;oBACjB,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI;oBAC3B,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK,GAAG,KAAK,YAAY,EAAE,OAAO,CAAC,IAAI;oBACjD,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,KAAK,QAAQ,GAAG;iBACnC;YACD,MAAM;gBACF;oBAAC;wBAAE,SAAS;wBAAiB,SAAS;wBAAG,QAAQ;4BAAE,QAAQ;4BAAS,WAAW;wBAAO;oBAAE;oBACxF;wBAAE,SAAS,CAAC,CAAC,EAAE,aAAa,OAAO,CAAC,IAAI;wBAAE,QAAQ;4BAAE,WAAW;wBAAO;oBAAE;oBACxE;iBAAG;aACN;YACD,OAAO;YACP,YAAY;gBAAE,WAAW;oBAAC;oBAAI;oBAAK;iBAAI;YAAC;YACxC,YAAY;gBAAE,WAAW;oBAAC;oBAAK;oBAAK;iBAAI;gBAAE,WAAW;oBAAC;oBAAE;oBAAE;iBAAE;YAAC;YAC7D,aAAa,CAAC;gBACV,OAAO;gBACP,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,qBAAqB,QAAQ;gBACtC,MAAM,YAAY,CAAC,qCAAqC,CAAC;gBACzD,MAAM,iBAAiB,IAAI,eAAe,CAAC,WAAW,YAAY,SAAS;gBAC3E,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,gBAAgB,QAAQ;YACrC;YACA,QAAQ;YACR,QAAQ;gBAAE,KAAK;gBAAI,MAAM;gBAAQ,OAAO;YAAO;QACnD;QAEA,eAAe;QACf,MAAM,WAAW,IAAI,MAAM,CAAC;QAC5B,MAAM,kBAAkB,IAAI,WAAW,WAAW,CAAC,kBAAkB,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;IACvH;IAEA,MAAM,uBAAuB;QACzB,MAAM,KAAK,6HAAA,CAAA,QAAU,CAAC,QAAQ;QAC9B,MAAM,WAAW,UAAU,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACpC,aAAa,KAAK,IAAI;gBACtB,OAAO,KAAK,GAAG;gBACf,iBAAiB,KAAK,YAAY;gBAClC,kBAAkB,KAAK,KAAK;gBAC5B,iBAAiB,KAAK,KAAK,GAAG,KAAK,YAAY;gBAC/C,aAAa,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,KAAK,QAAQ,GAAG;YACjD,CAAC;QAED,MAAM,KAAK,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC;QAEpC,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,IAAI;YACzB;gBAAC;gBAAI;gBAAI;gBAAI;gBAAiB;aAAa;SAC9C,EAAE;YAAE,QAAQ,CAAC;QAAE;QAEhB,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,IAAI;QACrC,CAAA,GAAA,6HAAA,CAAA,YAAc,AAAD,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;IACzF;IAEA,MAAM,wBAAwB;QAC1B,IAAI,gBAAiB,CAAC,YAAY,CAAC,SAAS,MAAM,MAAM,GAAG,GAAI;QAC/D,gBAAgB;QAChB,MAAM,MAAM,IAAI,mJAAA,CAAA,UAAK;QACrB,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,YAAY;QAC9E,IAAI,SAAS;QAEb,MAAM,YAAY,CAAC;YACf,OAAO;YACP,SAAS,KAAK,MAAM,EAAE,KAAK;QAC/B;QAEA,qBAAqB;QACrB,OAAO,CAAC;QACR,IAAI,WAAW,CAAC;QAChB,IAAI,OAAO,CAAC,aAAa;QACzB,IAAI,YAAY,CAAC;QACjB,IAAI,IAAI,CAAC,oCAAoC,QAAQ;QAErD,IAAI,WAAW,CAAC;QAChB,IAAI,OAAO,CAAC,aAAa;QACzB,IAAI,YAAY,CAAC;QACjB,MAAM,cAAc,CAAC,oLAAoL,CAAC;QAC1M,MAAM,eAAe,IAAI,eAAe,CAAC,aAAa,YAAY,SAAS;QAC3E,IAAI,IAAI,CAAC,cAAc,QAAQ;QAE/B,IAAI,WAAW;QAEf,IAAI,WAAW,CAAC;QAChB,IAAI,OAAO,CAAC,aAAa;QACzB,IAAI,IAAI,CAAC,0CAA0C,QAAQ;QAC3D,YAAY;QAEZ,4BAA4B;QAC5B,MAAM,YAAY;eAAI;SAAM,CAAC,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,QAAQ,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,GAAG;QAC9E,IAAI,UAAU,MAAM,GAAG,GACvB;YACI,MAAM,SAAS,SAAS;YACxB,MAAM,cAAc;YACpB,MAAM,cAAc;YACpB,MAAM,aAAa,YAAa,SAAS,IAAK;YAE9C,MAAM,cAAc,KAAK,GAAG,IAAI,UAAU,GAAG,CAAC,CAAA,IAAK,EAAE,QAAQ,GAAG;YAChE,MAAM,WAAW,aAAa,CAAC,UAAU,MAAM,GAAG,CAAC;YAEnD,kBAAkB;YAClB,IAAI,YAAY,CAAC;YACjB,IAAI,IAAI,CAAC,QAAQ,cAAc,aAAa,QAAQ,cAAc,IAAI,SAAS;YAC/E,IAAI,IAAI,CAAC,QAAQ,cAAc,aAAa,SAAS,YAAY,cAAc,cAAc,SAAS;YAEtG,uBAAuB;YACvB,IAAI,WAAW,CAAC;YAChB,IAAI,YAAY,CAAC;YACjB,UAAU,OAAO,CAAC,CAAC,MAAM;gBACrB,MAAM,YAAY,cAAc,IAAI,AAAC,KAAK,QAAQ,GAAG,cAAe,cAAc;gBAClF,MAAM,OAAO,SAAS,CAAC,QAAQ,IAAI,GAAG,IAAI;gBAE1C,IAAI,YAAY,CAAC,IAAI,KAAK;gBAC1B,IAAI,IAAI,CAAC,MAAM,cAAc,cAAc,WAAW,UAAU,WAAW;gBAE3E,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,GAAE,KAAK,OAAO,WAAW,GAAG,cAAc,cAAc,GAAG;oBAAE,OAAO;oBAAS,OAAO,CAAC;gBAAG;YACrH;YAEA,8BAA8B;YAC9B,IAAI,WAAW,CAAC;YAChB,IAAI,YAAY,CAAC;YACjB,IAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IACxB;gBACI,MAAM,QAAQ,KAAK,KAAK,CAAC,AAAC,cAAc,IAAK;gBAC7C,MAAM,OAAO,cAAc,cAAe,AAAC,QAAQ,cAAe;gBAClE,IAAI,IAAI,CAAC,MAAM,QAAQ,IAAI,SAAS,GAAG,OAAO,GAAG;oBAAE,OAAO;gBAAQ;gBAClE,IAAI,IAAI,CAAC,SAAS,GAAG,MAAM,SAAS,YAAY;YACpD;QACJ;QAEA,mCAAmC;QACnC,IAAI,YAAY,MAAM,MAAM,GAAG,GAC/B;YACI,IAAI,OAAO;YACX,OAAO,CAAC;YACR,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO,CAAC,aAAa;YACzB,IAAI,IAAI,CAAC,uBAAuB,QAAQ;YAExC,SAAS;YAET,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO,CAAC,aAAa;YACzB,IAAI,IAAI,CAAC,yBAAyB,QAAQ;YAC1C,IAAI,OAAO,CAAC,aAAa;YACzB,IAAI,IAAI,CAAC,GAAG,SAAS,kBAAkB,CAAC,MAAM,CAAC,EAAE,SAAS,IAAI;YAC9D,UAAU;YAEV,SAAS,QAAQ,CAAC,OAAO,CAAC,CAAA;gBACtB,IAAI,SAAS,KAAK,aAAa,IAC/B;oBACI,IAAI,OAAO;oBACX,OAAO,CAAC;oBACR,SAAS;gBACb;gBACA,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,QAAQ,KAAK,EAAE,QAAQ;gBAChC,UAAU;gBAEV,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,QAAQ,MAAM,CAAC,OAAO,CAAC,CAAA;oBACnB,MAAM,YAAY,IAAI,eAAe,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE,YAAa,SAAS,IAAK;oBAC/E,IAAI,SAAU,UAAU,MAAM,GAAG,IAAK,aAAa,IACnD;wBACI,IAAI,OAAO;wBACX,OAAO,CAAC;wBACR,SAAS;oBACb;oBACA,IAAI,IAAI,CAAC,WAAW,SAAS,GAAG;oBAChC,UAAW,UAAU,MAAM,GAAG;gBAClC;gBACA,UAAU;YACd;YAEA,IAAI,SAAS,aAAa,IAAI,SAAS,aAAa,CAAC,MAAM,GAAG,GAC9D;gBACI,IAAI,SAAU,aAAa,IAC3B;oBACI,IAAI,OAAO;oBACX,OAAO,CAAC;oBACR,SAAS;gBACb;gBACA,UAAU;gBACV,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;oBACX,MAAM;wBAAC;4BAAC;4BAAkB;4BAAY;yBAAQ;qBAAC;oBAC/C,MAAM,SAAS,aAAa,CAAC,GAAG,CAAC,CAAA,IAAK;4BAAC,EAAE,IAAI;4BAAE,EAAE,QAAQ;4BAAE,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI;yBAAC;oBACpF,QAAQ;oBACR,OAAO;oBACP,YAAY;wBAAE,WAAW;4BAAC;4BAAK;4BAAI;yBAAG;oBAAC;oBACvC,aAAa,CAAC,OAAS,UAAU;oBACjC,QAAQ;wBAAE,KAAK;wBAAI,MAAM;wBAAQ,OAAO;oBAAO;gBACnD;gBACA,SAAS,AAAC,IAAY,aAAa,CAAC,MAAM,GAAG;YACjD;YAEA,IAAI,SAAS,YAAY,IAAI,SAAS,YAAY,CAAC,MAAM,GAAG,GAC5D;gBACI,IAAI,SAAU,aAAa,IAC3B;oBACI,IAAI,OAAO;oBACX,OAAO,CAAC;oBACR,SAAS;gBACb;gBACA,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;oBACX,MAAM;wBAAC;4BAAC;4BAAiB;4BAAY;yBAAQ;qBAAC;oBAC9C,MAAM,SAAS,YAAY,CAAC,GAAG,CAAC,CAAA,IAAK;4BAAC,EAAE,IAAI;4BAAE,EAAE,QAAQ;4BAAE,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI;yBAAC;oBACnF,QAAQ;oBACR,OAAO;oBACP,YAAY;wBAAE,WAAW;4BAAC;4BAAI;4BAAK;yBAAG;oBAAC;oBACvC,aAAa;oBACb,QAAQ;wBAAE,KAAK;wBAAI,MAAM;wBAAQ,OAAO;oBAAO;gBACnD;gBACA,SAAS,AAAC,IAAY,aAAa,CAAC,MAAM;YAC9C;QACJ;QAEA,mCAAmC;QACnC,IAAI,OAAO;QACX,OAAO,CAAC;QACR,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;YACX,MAAM;gBAAC;oBAAC;oBAAa;oBAAO;oBAAkB;iBAAW;aAAC;YAC1D,MAAM,cAAc,GAAG,CAAC,CAAA,OAAQ;oBAAC,KAAK,IAAI;oBAAE,KAAK,GAAG;oBAAE,KAAK,YAAY;oBAAE,KAAK,YAAY;iBAAC;YAC3F,OAAO;YACP,YAAY;gBAAE,WAAW;oBAAC;oBAAI;oBAAK;iBAAI;YAAC;YACxC,aAAa,CAAC;gBACV,OAAO;gBACP,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,oBAAoB,QAAQ;gBACrC,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,MAAM,eAAe,CAAC,yEAAyE,CAAC;gBAChG,MAAM,oBAAoB,IAAI,eAAe,CAAC,cAAc,YAAY,SAAS;gBACjF,IAAI,IAAI,CAAC,mBAAmB,QAAQ;YACxC;YACA,QAAQ;YACR,QAAQ;gBAAE,KAAK;gBAAI,MAAM;gBAAQ,OAAO;YAAO;QACnD;QAEA,wCAAwC;QACxC,IAAI,OAAO;QACX,OAAO,CAAC;QACR,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;YACX,MAAM;gBAAC;oBAAC;oBAAa;oBAAO;oBAAY;oBAAY;iBAAa;aAAC;YAClE,MAAM,MAAM,GAAG,CAAC,CAAA,OAAQ;oBAAC,KAAK,IAAI;oBAAE,KAAK,GAAG;oBAAE,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,UAAU,GAAG,QAAQ;oBAAO,KAAK,QAAQ;oBAAE,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI;iBAAC;YACxJ,OAAO;YACP,YAAY;gBAAE,WAAW;oBAAC;oBAAI;oBAAK;iBAAI;YAAC;YACxC,aAAa,CAAC;gBACV,OAAO;gBACP,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,yBAAyB,QAAQ;gBAC1C,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,MAAM,cAAc,CAAC,4FAA4F,CAAC;gBAClH,MAAM,mBAAmB,IAAI,eAAe,CAAC,aAAa,YAAY,SAAS;gBAC/E,IAAI,IAAI,CAAC,kBAAkB,QAAQ;YACvC;YACA,QAAQ;YACR,QAAQ;gBAAE,KAAK;gBAAI,MAAM;gBAAQ,OAAO;YAAO;QACnD;QAEA,oCAAoC;QACpC,IAAI,OAAO;QACX,OAAO,CAAC;QACR,CAAA,GAAA,0KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;YACX,MAAM;gBAAC;oBAAC;oBAAa;oBAAO;oBAAY;oBAAc;oBAAiB;iBAAY;aAAC;YACpF,MAAM,UAAU,GAAG,CAAC,CAAA,OAAQ;oBACxB,KAAK,IAAI;oBACT,KAAK,GAAG;oBACR,KAAK,YAAY;oBACjB,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI;oBAC3B,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK,GAAG,KAAK,YAAY,EAAE,OAAO,CAAC,IAAI;oBACjD,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,KAAK,QAAQ,GAAG;iBACnC;YACD,MAAM;gBACF;oBAAC;wBAAE,SAAS;wBAAiB,SAAS;wBAAG,QAAQ;4BAAE,QAAQ;4BAAS,WAAW;wBAAO;oBAAE;oBACxF;wBAAE,SAAS,CAAC,CAAC,EAAE,aAAa,OAAO,CAAC,IAAI;wBAAE,QAAQ;4BAAE,WAAW;wBAAO;oBAAE;oBACxE;iBAAG;aACN;YACD,OAAO;YACP,YAAY;gBAAE,WAAW;oBAAC;oBAAI;oBAAK;iBAAI;YAAC;YACxC,YAAY;gBAAE,WAAW;oBAAC;oBAAK;oBAAK;iBAAI;gBAAE,WAAW;oBAAC;oBAAE;oBAAE;iBAAE;YAAC;YAC7D,aAAa,CAAC;gBACV,OAAO;gBACP,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,qBAAqB,QAAQ;gBACtC,IAAI,WAAW,CAAC;gBAChB,IAAI,OAAO,CAAC,aAAa;gBACzB,MAAM,gBAAgB,CAAC,wBAAwB,CAAC;gBAChD,MAAM,qBAAqB,IAAI,eAAe,CAAC,eAAe,YAAY,SAAS;gBACnF,IAAI,IAAI,CAAC,oBAAoB,QAAQ;YACzC;YACA,QAAQ;YACR,QAAQ;gBAAE,KAAK;gBAAI,MAAM;gBAAQ,OAAO;YAAO;QACnD;QAEA,eAAe;QACf,MAAM,WAAW,IAAI,MAAM,CAAC;QAC5B,MAAM,kBAAkB,IAAI,WAAW,WAAW,CAAC,8BAA8B,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;QAC/H,gBAAgB;IACpB;IAEA,MAAM,0BAA0B;QAC5B,MAAM,KAAK,6HAAA,CAAA,QAAU,CAAC,QAAQ;QAE9B,wBAAwB;QACxB,MAAM,eAAe,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,cAAc,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACrE,MAAM,KAAK,IAAI;gBACf,KAAK,KAAK,GAAG;gBACb,UAAU,KAAK,QAAQ;gBACvB,kBAAkB,KAAK,YAAY;gBACnC,iBAAiB,KAAK,YAAY;YACtC,CAAC;QACD,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,cAAc;QAE/C,uBAAuB;QACvB,MAAM,eAAe,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAA,OAAQ,CAAC;gBAC7D,MAAM,KAAK,IAAI;gBACf,KAAK,KAAK,GAAG;gBACb,UAAU,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,UAAU,GAAG,QAAQ;gBAClE,UAAU,KAAK,QAAQ;gBACvB,OAAO,KAAK,KAAK;gBACjB,kBAAkB,KAAK,YAAY;gBACnC,iBAAiB,KAAK,YAAY;YACtC,CAAC;QACD,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,cAAc;QAE/C,uBAAuB;QACvB,MAAM,cAAc,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,aAAa,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACnE,MAAM,KAAK,IAAI;gBACf,KAAK,KAAK,GAAG;gBACb,UAAU,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,UAAU,GAAG,QAAQ;gBAClE,UAAU,KAAK,QAAQ;gBACvB,OAAO,KAAK,KAAK;YACrB,CAAC;QACD,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,aAAa;QAE9C,mBAAmB;QACnB,MAAM,WAAW,UAAU,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACpC,aAAa,KAAK,IAAI;gBACtB,OAAO,KAAK,GAAG;gBACf,iBAAiB,KAAK,YAAY;gBAClC,kBAAkB,KAAK,KAAK;gBAC5B,iBAAiB,KAAK,KAAK,GAAG,KAAK,YAAY;gBAC/C,aAAa,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,KAAK,QAAQ,GAAG;YACjD,CAAC;QACD,MAAM,gBAAgB,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC;QAC/C,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,eAAe;YACpC;gBAAC;gBAAI;gBAAI;gBAAI;gBAAiB;aAAa;SAC9C,EAAE;YAAE,QAAQ,CAAC;QAAE;QAChB,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,eAAe;QAEhD,mBAAmB;QACnB,MAAM,gBAAgB,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAA,WAAY,CAAC;gBACvE,MAAM,SAAS,IAAI;gBACnB,aAAa,SAAS,WAAW,IAAI;gBACrC,cAAc,SAAS,SAAS;YACpC,CAAC;QACD,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,eAAe;QAEhD,CAAA,GAAA,6HAAA,CAAA,YAAc,AAAD,EAAE,IAAI,CAAC,8BAA8B,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;IACrG;IAEA,IAAI,WAAW;QACX,qBACI;;8BACI,8OAAC,oIAAA,CAAA,aAAU;oBACP,OAAM;oBACN,aAAY;;;;;;8BAEhB,8OAAC;oBAAI,WAAU;;sCACX,8OAAC,gIAAA,CAAA,OAAI;;8CACD,8OAAC,gIAAA,CAAA,aAAU;;sDACP,8OAAC,gIAAA,CAAA,YAAS;sDAAC;;;;;;sDACX,8OAAC,gIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAErB,8OAAC,gIAAA,CAAA,cAAW;8CACZ,cAAA,8OAAC,oIAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;;;;;;;;;;;;sCAGxB,8OAAC,gIAAA,CAAA,OAAI;;8CACD,8OAAC,gIAAA,CAAA,aAAU;;sDACP,8OAAC,gIAAA,CAAA,YAAS;sDAAC;;;;;;sDACX,8OAAC,gIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAErB,8OAAC,gIAAA,CAAA,cAAW;8CACZ,cAAA,8OAAC,oIAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;IAMxC;IAEA,qBACI;;0BACI,8OAAC,oIAAA,CAAA,aAAU;gBACP,OAAM;gBACN,aAAY;0BAEZ,cAAA,8OAAC,4IAAA,CAAA,eAAY;;sCACT,8OAAC,4IAAA,CAAA,sBAAmB;4BAAC,OAAO;sCACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gCAAC,SAAQ;gCAAU,MAAK;gCAAK,UAAU,gBAAiB,CAAC,CAAC,SAAS,CAAC,YAAa,MAAM,MAAM,KAAK;;oCACpG,eAAe,kBAAkB;kDAClC,8OAAC,oNAAA,CAAA,cAAW;wCAAC,WAAU;;;;;;;;;;;;;;;;;sCAG/B,8OAAC,4IAAA,CAAA,sBAAmB;;8CAChB,8OAAC,4IAAA,CAAA,mBAAgB;oCAAC,SAAS;oCAAuB,UAAU,gBAAiB,CAAC,CAAC,SAAS,CAAC,YAAa,MAAM,MAAM,KAAK;;sDACnH,8OAAC,8MAAA,CAAA,WAAQ;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;8CAGzC,8OAAC,4IAAA,CAAA,mBAAgB;oCAAC,SAAS;oCAAyB,UAAU,gBAAgB,MAAM,MAAM,KAAK;;sDAC3F,8OAAC,8MAAA,CAAA,WAAQ;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;;;;;;;;;;;;0BAMrD,8OAAC;gBAAI,WAAU;;oBACV,uBACG,8OAAC,iIAAA,CAAA,QAAK;wBAAC,SAAQ;;0CACX,8OAAC;gCAAI,WAAU;;oCACV,MAAM,QAAQ,CAAC,4BAAc,8OAAC,gNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;6DAA4B,8OAAC,wNAAA,CAAA,gBAAa;wCAAC,WAAU;;;;;;kDACxG,8OAAC,iIAAA,CAAA,aAAU;kDAAC;;;;;;;;;;;;0CAEhB,8OAAC,iIAAA,CAAA,mBAAgB;0CACZ;;;;;;;;;;;;kCAIb,8OAAC,gIAAA,CAAA,OAAI;;0CACD,8OAAC,gIAAA,CAAA,aAAU;gCAAC,WAAU;;kDAClB,8OAAC;;0DACG,8OAAC,gIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,gIAAA,CAAA,kBAAe;0DAAC;;;;;;;;;;;;kDAErB,8OAAC,4IAAA,CAAA,eAAY;;0DACT,8OAAC,4IAAA,CAAA,sBAAmB;gDAAC,OAAO;0DACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;oDAAC,SAAQ;oDAAU,MAAK;;wDAAK;sEAEhC,8OAAC,oNAAA,CAAA,cAAW;4DAAC,WAAU;;;;;;;;;;;;;;;;;0DAG/B,8OAAC,4IAAA,CAAA,sBAAmB;;kEAChB,8OAAC,4IAAA,CAAA,mBAAgB;wDAAC,SAAS;;0EACvB,8OAAC,8MAAA,CAAA,WAAQ;gEAAC,WAAU;;;;;;4DAAiB;;;;;;;kEAGzC,8OAAC,4IAAA,CAAA,mBAAgB;wDAAC,SAAS;;0EACvB,8OAAC,8MAAA,CAAA,WAAQ;gEAAC,WAAU;;;;;;4DAAiB;;;;;;;;;;;;;;;;;;;;;;;;;0CAMrD,8OAAC,gIAAA,CAAA,cAAW;0CACR,cAAA,8OAAC,iIAAA,CAAA,QAAK;;sDACF,8OAAC,iIAAA,CAAA,cAAW;sDACR,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;kEACL,8OAAC,iIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,iIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,iIAAA,CAAA,YAAS;wDAAC,WAAU;kEAAa;;;;;;kEAClC,8OAAC,iIAAA,CAAA,YAAS;wDAAC,WAAU;kEAAa;;;;;;;;;;;;;;;;;sDAG1C,8OAAC,iIAAA,CAAA,YAAS;sDACL,cAAc,MAAM,GAAG,IAAI,cAAc,GAAG,CAAC,CAAA,qBAC1C,8OAAC,iIAAA,CAAA,WAAQ;;sEACL,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAe,KAAK,IAAI;;;;;;sEAC7C,8OAAC,iIAAA,CAAA,YAAS;sEAAE,KAAK,GAAG;;;;;;sEACpB,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAc,KAAK,QAAQ;;;;;;sEAChD,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAc,KAAK,YAAY;;;;;;;mDAJzC,KAAK,EAAE;;;;0EAOtB,8OAAC,iIAAA,CAAA,WAAQ;0DACL,cAAA,8OAAC,iIAAA,CAAA,YAAS;oDAAC,SAAS;oDAAG,WAAU;8DAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCASvE,8OAAC,gIAAA,CAAA,OAAI;;0CACD,8OAAC,gIAAA,CAAA,aAAU;gCAAC,WAAU;;kDAClB,8OAAC;;0DACG,8OAAC,gIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,gIAAA,CAAA,kBAAe;0DAAC;;;;;;;;;;;;kDAErB,8OAAC,4IAAA,CAAA,eAAY;;0DACT,8OAAC,4IAAA,CAAA,sBAAmB;gDAAC,OAAO;0DACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;oDAAC,SAAQ;oDAAU,MAAK;;wDAAK;sEAEhC,8OAAC,oNAAA,CAAA,cAAW;4DAAC,WAAU;;;;;;;;;;;;;;;;;0DAG/B,8OAAC,4IAAA,CAAA,sBAAmB;;kEAChB,8OAAC,4IAAA,CAAA,mBAAgB;wDAAC,SAAS;;0EACvB,8OAAC,8MAAA,CAAA,WAAQ;gEAAC,WAAU;;;;;;4DAAiB;;;;;;;kEAGzC,8OAAC,4IAAA,CAAA,mBAAgB;wDAAC,SAAS;;0EACvB,8OAAC,8MAAA,CAAA,WAAQ;gEAAC,WAAU;;;;;;4DAAiB;;;;;;;;;;;;;;;;;;;;;;;;;0CAMrD,8OAAC,gIAAA,CAAA,cAAW;0CACR,cAAA,8OAAC,iIAAA,CAAA,QAAK;;sDACF,8OAAC,iIAAA,CAAA,cAAW;sDACR,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;kEACL,8OAAC,iIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,iIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,iIAAA,CAAA,YAAS;wDAAC,WAAU;kEAAa;;;;;;kEAClC,8OAAC,iIAAA,CAAA,YAAS;wDAAC,WAAU;kEAAa;;;;;;kEAClC,8OAAC,iIAAA,CAAA,YAAS;kEAAC;;;;;;;;;;;;;;;;;sDAGnB,8OAAC,iIAAA,CAAA,YAAS;sDACL,UAAU,MAAM,GAAG,IAAI,UAAU,GAAG,CAAC,CAAA,qBAClC,8OAAC,iIAAA,CAAA,WAAQ;;sEACL,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAe,KAAK,IAAI;;;;;;sEAC7C,8OAAC,iIAAA,CAAA,YAAS;sEAAE,KAAK,GAAG;;;;;;sEACpB,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAc,KAAK,YAAY;;;;;;sEACpD,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;;gEAAyB;gEAAE,CAAC,KAAK,KAAK,GAAG,KAAK,YAAY,EAAE,OAAO,CAAC;;;;;;;sEACzF,8OAAC,iIAAA,CAAA,YAAS;sEAAE,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,KAAK,QAAQ,GAAG;;;;;;;mDALjC,KAAK,EAAE;;;;0EAQtB,8OAAC,iIAAA,CAAA,WAAQ;0DACL,cAAA,8OAAC,iIAAA,CAAA,YAAS;oDAAC,SAAS;oDAAG,WAAU;8DAAc;;;;;;;;;;;;;;;;sDAM3D,8OAAC,iIAAA,CAAA,cAAW;sDACR,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;kEACL,8OAAC,iIAAA,CAAA,YAAS;wDAAC,SAAS;wDAAG,WAAU;kEAAuB;;;;;;kEACxD,8OAAC,iIAAA,CAAA,YAAS;wDAAC,WAAU;kEAChB,CAAC,CAAC,EAAE,aAAa,OAAO,CAAC,IAAI;;;;;;kEAElC,8OAAC,iIAAA,CAAA,YAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAM9B,8OAAC,gIAAA,CAAA,OAAI;;0CACD,8OAAC,gIAAA,CAAA,aAAU;gCAAC,WAAU;;kDAClB,8OAAC;;0DACG,8OAAC,gIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,gIAAA,CAAA,kBAAe;0DAAC;;;;;;;;;;;;kDAErB,8OAAC,4IAAA,CAAA,eAAY;;0DACT,8OAAC,4IAAA,CAAA,sBAAmB;gDAAC,OAAO;0DACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;oDAAC,SAAQ;oDAAU,MAAK;;wDAAK;sEAEhC,8OAAC,oNAAA,CAAA,cAAW;4DAAC,WAAU;;;;;;;;;;;;;;;;;0DAG/B,8OAAC,4IAAA,CAAA,sBAAmB;;kEAChB,8OAAC,4IAAA,CAAA,mBAAgB;wDAAC,SAAS;;0EACvB,8OAAC,8MAAA,CAAA,WAAQ;gEAAC,WAAU;;;;;;4DAAiB;;;;;;;kEAGzC,8OAAC,4IAAA,CAAA,mBAAgB;wDAAC,SAAS;;0EACvB,8OAAC,8MAAA,CAAA,WAAQ;gEAAC,WAAU;;;;;;4DAAiB;;;;;;;;;;;;;;;;;;;;;;;;;0CAMrD,8OAAC,gIAAA,CAAA,cAAW;0CACZ,cAAA,8OAAC,iIAAA,CAAA,QAAK;;sDACE,8OAAC,iIAAA,CAAA,cAAW;sDACR,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;kEACL,8OAAC,iIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,iIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,iIAAA,CAAA,YAAS;wDAAC,WAAU;kEAAa;;;;;;kEAClC,8OAAC,iIAAA,CAAA,YAAS;wDAAC,WAAU;kEAAa;;;;;;;;;;;;;;;;;sDAG1C,8OAAC,iIAAA,CAAA,YAAS;sDACL,MAAM,MAAM,GAAG,IAAI,MAAM,GAAG,CAAC,CAAA,qBAC1B,8OAAC,iIAAA,CAAA,WAAQ;;sEACL,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAe,KAAK,IAAI;;;;;;sEAC7C,8OAAC,iIAAA,CAAA,YAAS;sEAAE,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,UAAU,GAAG,QAAQ;;;;;;sEACpE,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAc,KAAK,QAAQ;;;;;;sEAChD,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;;gEAAa;gEAAE,KAAK,KAAK,CAAC,OAAO,CAAC;;;;;;;;mDAJ5C,KAAK,EAAE;;;;0EAOtB,8OAAC,iIAAA,CAAA,WAAQ;0DACL,cAAA,8OAAC,iIAAA,CAAA,YAAS;oDAAC,SAAS;oDAAG,WAAU;8DAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYvF","debugId":null}}]
}