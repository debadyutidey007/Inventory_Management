{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/Inventory_Management_System/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/Inventory_Management_System/src/ai/flows/generate-inventory-analysis.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for generating a comprehensive inventory analysis.\n *\n * - generateInventoryAnalysis - A function that generates a health report based on all inventory items.\n * - GenerateInventoryAnalysisInput - The input type for the function.\n * - GenerateInventoryAnalysisOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateInventoryAnalysisInputSchema = z.object({\n  inventoryItems: z.array(\n    z.object({\n      itemId: z.string().describe('The unique identifier for the item.'),\n      itemName: z.string().describe('The name of the item.'),\n      currentQuantity: z.number().describe('The current quantity in stock.'),\n      reorderPoint: z.number().describe('The reorder point for the item.'),\n      averageDailySales: z\n        .number()\n        .describe('The average daily sales volume of the item.'),\n      sellingPrice: z.number().describe('The selling price of the item.'),\n      supplierName: z.string().describe('The name of the supplier.'),\n      leadTimeDays: z.number().describe('The lead time in days from the supplier.'),\n    })\n  ).describe('An array of all items in the inventory.'),\n});\nexport type GenerateInventoryAnalysisInput = z.infer<typeof GenerateInventoryAnalysisInputSchema>;\n\nconst ItemDetailSchema = z.object({\n  name: z.string().describe('The name of the item.'),\n  quantity: z.number().describe('The current quantity in stock.'),\n  price: z.number().describe('The selling price of the item.'),\n});\n\nconst GenerateInventoryAnalysisOutputSchema = z.object({\n  overallHealthScore: z.number().int().min(0).max(100).describe('A score from 0-100 representing the overall health of the inventory. 100 is perfect.'),\n  analysis: z.array(z.object({\n    title: z.string().describe('The title of the analysis section (e.g., \"Best Sellers\", \"Slow Movers\", \"Recommendations\").'),\n    points: z.array(z.string()).describe('A list of key observations or recommendations for this section.')\n  })).describe(\"A structured analysis of the inventory's health, broken down into key areas.\"),\n  lowStockItems: z.array(ItemDetailSchema).describe('A list of items with a quantity of 0, including their key attributes.'),\n  inStockItems: z.array(ItemDetailSchema).describe('A list of items with a quantity greater than 0, including their key attributes.')\n});\nexport type GenerateInventoryAnalysisOutput = z.infer<typeof GenerateInventoryAnalysisOutputSchema>;\n\nexport async function generateInventoryAnalysis(input: GenerateInventoryAnalysisInput): Promise<GenerateInventoryAnalysisOutput> {\n  return generateInventoryAnalysisFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInventoryAnalysisPrompt',\n  input: {schema: GenerateInventoryAnalysisInputSchema},\n  output: {schema: GenerateInventoryAnalysisOutputSchema},\n  prompt: `You are a world-class AI inventory management consultant. Your task is to conduct a comprehensive health check of the entire inventory and provide a strategic analysis.\n\n  Analyze the provided data for all inventory items to generate a structured report. Your response must be highly professional, insightful, and strategic.\n\n  **1. Overall Health Score (0-100):**\n  Calculate a single health score for the entire inventory using the following weighted methodology. Base this on a holistic view:\n  - **Stock Levels (50% weight):** Are items appropriately stocked?\n      - For each item, calculate a stock level score (0-100). 100 is perfect (quantity is exactly at reorder point * 1.5).\n      - Penalize for being out-of-stock (score of 0).\n      - Penalize for significant overstock (e.g., quantity > 3 * reorder point).\n      - Average the scores for all items.\n  - **Sales Velocity (30% weight):** Are items selling well?\n      - Categorize items as \"Fast Mover\" (sells > 10 units/day), \"Medium Mover\" (1-10 units/day), \"Slow Mover\" (<1 unit/day).\n      - Calculate a score based on the distribution. A healthy inventory has a good mix, but a high percentage of slow-movers should lower the score. (e.g., % Fast * 100 + % Medium * 70 + % Slow * 30).\n  - **Risk (20% weight):**\n      - Identify items where the 'days until stockout' (quantity / avg daily sales) is less than the supplier lead time.\n      - The higher the percentage of items at risk of stocking out, the lower the score. (e.g., 100 - (% of at-risk items * 2)).\n  - Combine these weighted scores into a final health score from 0-100. A score below 50 indicates critical issues.\n\n  **2. Structured Analysis:**\n  Provide a breakdown of your findings into the following sections. For each section, provide a few bullet points highlighting the most important insights. Be concise and impactful.\n  - **Best Sellers:** Identify the top-performing items based on sales velocity and value. Comment on their stock levels. Are they well-managed?\n  - **Slow Movers:** Identify items with low sales velocity or those that are significantly overstocked (quantity far exceeds reorder point and sales rate).\n  - **Recommendations:** Based on your analysis, provide a list of strategic recommendations to improve inventory health. Examples: \"Consider a promotional campaign for [Slow Mover Item Name]\", \"Urgently re-order [Critical Low Stock Item Name]\", \"Increase reorder point for [Best Seller Name] to avoid stockouts.\"\n\n  **3. Item Lists:**\n  - **Low Stock Items:** Populate the 'lowStockItems' array with all items that have a current quantity of 0. Include their name, quantity, and price.\n  - **In-Stock Items:** Populate the 'inStockItems' array with all items that have a current quantity greater than 0. Include their name, quantity, and price.\n\n\n  Here is the data for all inventory items:\n\n  {{#each inventoryItems}}\n  - Item: {{itemName}} (ID: {{itemId}})\n    - Current Quantity: {{currentQuantity}}\n    - Re-order Point: {{reorderPoint}}\n    - Avg. Daily Sales: {{averageDailySales}}\n    - Selling Price: $ {{sellingPrice}}\n    - Supplier: {{supplierName}}\n    - Lead Time: {{leadTimeDays}} days\n  {{/each}}\n\n  Based on this complete data set, generate the comprehensive inventory health analysis.\n  `,\n});\n\nconst generateInventoryAnalysisFlow = ai.defineFlow(\n  {\n    name: 'generateInventoryAnalysisFlow',\n    inputSchema: GenerateInventoryAnalysisInputSchema,\n    outputSchema: GenerateInventoryAnalysisOutputSchema,\n  },\n  async input => {\n    // Log the input before sending it to the prompt\n    console.log('Input for generateInventoryAnalysisFlow:', JSON.stringify(input, null, 2));\n\n    const {output} = await prompt(input);\n\n    // Log the output received from the prompt\n    console.log('Output from generateInventoryAnalysisFlow:', JSON.stringify(output, null, 2));\n\n    return output!;\n  }\n);"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACrB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClC,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CAAC;QACZ,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,IACA,QAAQ,CAAC;AACb;AAGA,MAAM,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,QAAQ,CAAC;IAC9D,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACzB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,QAAQ,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IACvC,IAAI,QAAQ,CAAC;IACb,eAAe,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kBAAkB,QAAQ,CAAC;IAClD,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kBAAkB,QAAQ,CAAC;AACnD;AAGO,eAAe,0BAA0B,KAAqC;IACnF,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2CT,CAAC;AACH;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,gDAAgD;IAChD,QAAQ,GAAG,CAAC,4CAA4C,KAAK,SAAS,CAAC,OAAO,MAAM;IAEpF,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAE9B,0CAA0C;IAC1C,QAAQ,GAAG,CAAC,8CAA8C,KAAK,SAAS,CAAC,QAAQ,MAAM;IAEvF,OAAO;AACT;;;IAtEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/Inventory_Management_System/.next-internal/server/app/dashboard/reports/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateInventoryAnalysis as '40492a435c6100e61cc5fa586ae7ce0b0fe8845b3b'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/Inventory_Management_System/src/app/dashboard/reports/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/reports/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/reports/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/Inventory_Management_System/src/app/dashboard/reports/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/reports/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/reports/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}