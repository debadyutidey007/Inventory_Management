{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/page-header.tsx"],"sourcesContent":["type PageHeaderProps = {\n  title: string;\n  description?: string;\n  children?: React.ReactNode;\n};\n\nexport function PageHeader({ title, description, children }: PageHeaderProps) {\n  return (\n    <div className=\"flex flex-col items-start justify-between gap-4 md:flex-row md:items-center\">\n      <div className=\"grid gap-1\">\n        <h1 className=\"text-2xl font-bold tracking-tight md:text-3xl\">{title}</h1>\n        {description && (\n          <p className=\"text-muted-foreground\">{description}</p>\n        )}\n      </div>\n      {children && <div className=\"flex shrink-0 gap-2\">{children}</div>}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAMO,SAAS,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAmB;IAC1E,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAiD;;;;;;oBAC9D,6BACC,6LAAC;wBAAE,WAAU;kCAAyB;;;;;;;;;;;;YAGzC,0BAAY,6LAAC;gBAAI,WAAU;0BAAuB;;;;;;;;;;;;AAGzD;KAZgB","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-inventory-analysis.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for generating a comprehensive inventory analysis.\n *\n * - generateInventoryAnalysis - A function that generates a health report based on all inventory items.\n * - GenerateInventoryAnalysisInput - The input type for the function.\n * - GenerateInventoryAnalysisOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateInventoryAnalysisInputSchema = z.object({\n  inventoryItems: z.array(\n    z.object({\n      itemId: z.string().describe('The unique identifier for the item.'),\n      itemName: z.string().describe('The name of the item.'),\n      currentQuantity: z.number().describe('The current quantity in stock.'),\n      reorderPoint: z.number().describe('The reorder point for the item.'),\n      averageDailySales: z\n        .number()\n        .describe('The average daily sales volume of the item.'),\n      sellingPrice: z.number().describe('The selling price of the item.'),\n      supplierName: z.string().describe('The name of the supplier.'),\n      leadTimeDays: z.number().describe('The lead time in days from the supplier.'),\n    })\n  ).describe('An array of all items in the inventory.'),\n});\nexport type GenerateInventoryAnalysisInput = z.infer<typeof GenerateInventoryAnalysisInputSchema>;\n\nconst ItemDetailSchema = z.object({\n  name: z.string().describe('The name of the item.'),\n  quantity: z.number().describe('The current quantity in stock.'),\n  price: z.number().describe('The selling price of the item.'),\n});\n\nconst GenerateInventoryAnalysisOutputSchema = z.object({\n  overallHealthScore: z.number().int().min(0).max(100).describe('A score from 0-100 representing the overall health of the inventory. 100 is perfect.'),\n  analysis: z.array(z.object({\n    title: z.string().describe('The title of the analysis section (e.g., \"Best Sellers\", \"Slow Movers\", \"Recommendations\").'),\n    points: z.array(z.string()).describe('A list of key observations or recommendations for this section.')\n  })).describe(\"A structured analysis of the inventory's health, broken down into key areas.\"),\n  lowStockItems: z.array(ItemDetailSchema).describe('A list of items with a quantity of 0, including their key attributes.'),\n  inStockItems: z.array(ItemDetailSchema).describe('A list of items with a quantity greater than 0, including their key attributes.')\n});\nexport type GenerateInventoryAnalysisOutput = z.infer<typeof GenerateInventoryAnalysisOutputSchema>;\n\nexport async function generateInventoryAnalysis(input: GenerateInventoryAnalysisInput): Promise<GenerateInventoryAnalysisOutput> {\n  return generateInventoryAnalysisFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInventoryAnalysisPrompt',\n  input: {schema: GenerateInventoryAnalysisInputSchema},\n  output: {schema: GenerateInventoryAnalysisOutputSchema},\n  prompt: `You are a world-class AI inventory management consultant. Your task is to conduct a comprehensive health check of the entire inventory and provide a strategic analysis.\n\n  Analyze the provided data for all inventory items to generate a structured report. Your response must be highly professional, insightful, and strategic.\n\n  **1. Overall Health Score (0-100):**\n  Calculate a single health score for the entire inventory. Base this on a holistic view:\n  - **Stock Levels:** Are items appropriately stocked? Penalize for both out-of-stock and significant overstock situations.\n  - **Sales Velocity:** Are items selling well? A high percentage of slow-movers should lower the score.\n  - **Risk:** High potential revenue loss from low-stock items should significantly lower the score.\n  - A score of 100 is a perfectly balanced, high-performing inventory. A score below 50 indicates critical issues.\n\n  **2. Structured Analysis:**\n  Provide a breakdown of your findings into the following sections. For each section, provide a few bullet points highlighting the most important insights. Be concise and impactful.\n  - **Best Sellers:** Identify the top-performing items based on sales velocity and value. Comment on their stock levels. Are they well-managed?\n  - **Slow Movers:** Identify items with low sales velocity or those that are significantly overstocked (quantity far exceeds reorder point and sales rate).\n  - **Recommendations:** Based on your analysis, provide a list of strategic recommendations to improve inventory health. Examples: \"Consider a promotional campaign for [Slow Mover Item Name]\", \"Urgently re-order [Critical Low Stock Item Name]\", \"Increase reorder point for [Best Seller Name] to avoid stockouts.\"\n\n  **3. Item Lists:**\n  - **Low Stock Items:** Populate the 'lowStockItems' array with all items that have a current quantity of 0. Include their name, quantity, and price.\n  - **In-Stock Items:** Populate the 'inStockItems' array with all items that have a current quantity greater than 0. Include their name, quantity, and price.\n\n\n  Here is the data for all inventory items:\n\n  {{#each inventoryItems}}\n  - Item: {{itemName}} (ID: {{itemId}})\n    - Current Quantity: {{currentQuantity}}\n    - Re-order Point: {{reorderPoint}}\n    - Avg. Daily Sales: {{averageDailySales}}\n    - Selling Price: $ {{sellingPrice}}\n    - Supplier: {{supplierName}}\n    - Lead Time: {{leadTimeDays}} days\n  {{/each}}\n\n  Based on this complete data set, generate the comprehensive inventory health analysis.\n  `,\n});\n\nconst generateInventoryAnalysisFlow = ai.defineFlow(\n  {\n    name: 'generateInventoryAnalysisFlow',\n    inputSchema: GenerateInventoryAnalysisInputSchema,\n    outputSchema: GenerateInventoryAnalysisOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAiDsB,4BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf;KAVS","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/reports/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { PageHeader } from \"@/components/page-header\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { ChevronDown, FileDown } from 'lucide-react';\nimport type { Item, Category } from \"@/types\";\nimport { generateInventoryAnalysis, type GenerateInventoryAnalysisOutput } from '@/ai/flows/generate-inventory-analysis';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport default function ReportsPage() {\n    const [items, setItems] = React.useState<Item[]>([]);\n    const [categories, setCategories] = React.useState<Category[]>([]);\n    const [isClient, setIsClient] = React.useState(false);\n    const [isGenerating, setIsGenerating] = React.useState(false);\n    const [aiReport, setAiReport] = React.useState<GenerateInventoryAnalysisOutput | null>(null);\n\n    const loadData = React.useCallback(() => {\n        try {\n            const storedItems = localStorage.getItem('inventory-manager-items');\n            if (storedItems) {\n                setItems(JSON.parse(storedItems));\n            }\n            const storedCategories = localStorage.getItem('inventory-manager-categories');\n            if (storedCategories) {\n                setCategories(JSON.parse(storedCategories));\n            }\n        } catch (error) {\n            console.error(\"Failed to parse from localStorage\", error);\n        }\n    }, []);\n    \n    React.useEffect(() => {\n        setIsClient(true);\n        loadData();\n\n        const handleStorageChange = (event: StorageEvent) => {\n            if (event.key === 'inventory-manager-items' || event.key === 'inventory-manager-categories') {\n                loadData();\n            }\n        };\n\n        window.addEventListener('storage', handleStorageChange);\n        return () => {\n            window.removeEventListener('storage', handleStorageChange);\n        };\n    }, [loadData]);\n    \n    React.useEffect(() => {\n        const fetchReport = async () => {\n          if (items.length === 0) {\n            setAiReport(null);\n            return;\n          }\n    \n          setIsGenerating(true);\n          setError(null);\n          const reportInput = {\n            inventoryItems: items.map(item => ({\n              itemId: item.id,\n              itemName: item.name,\n              currentQuantity: item.quantity,\n              reorderPoint: item.reorderPoint,\n              averageDailySales: item.averageDailySales,\n              sellingPrice: item.price,\n              supplierName: item.supplierName,\n              leadTimeDays: item.leadTimeDays,\n            })),\n          };\n    \n          try {\n            const result = await generateInventoryAnalysis(reportInput);\n            setAiReport(result);\n          } catch (e) {\n            console.error('Error generating AI health report:', e);\n            setError('There was an issue with the AI service. Please try again later.');\n          } finally {\n            setIsGenerating(false);\n          }\n        };\n    \n        if(isClient) {\n            fetchReport();\n        }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [items, isClient]);\n\n\n    const lowStockItems = items.filter(item => item.quantity === 0);\n    const inStockItems = items.filter(item => item.quantity > 0);\n    const [error, setError] = React.useState<string | null>(null);\n\n    const setupPdfDoc = (doc: jsPDF) => {\n        const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.get(\"height\");\n        const pageWidth = doc.internal.pageSize.width || doc.internal.pageSize.get(\"width\");\n        const reportDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n        const margin = 14;\n        \n        const header = (data: any) => {\n            doc.setFontSize(18);\n            doc.setFont('helvetica', 'bold');\n            doc.setTextColor('#0C7FF2');\n            doc.text(\"Inventory Manager\", margin, 22);\n            \n            doc.setFontSize(10);\n            doc.setFont('helvetica', 'normal');\n            doc.setTextColor('#333333');\n            doc.text(`Report Generated: ${reportDate}`, pageWidth - margin, 22, { align: 'right' });\n            \n            doc.setLineWidth(0.5);\n            doc.setDrawColor('#0C7FF2');\n            doc.line(margin, 28, pageWidth - margin, 28);\n        };\n\n        const addWatermark = () => {\n            doc.saveGraphicsState();\n            doc.setFont('helvetica', 'bold');\n            doc.setFontSize(72);\n            doc.setTextColor('#000000');\n            doc.setGState(new (doc as any).GState({ opacity: 0.05 }));\n            doc.text(\"Confidential\", pageWidth / 2, pageHeight / 2, {\n                angle: -45,\n                align: 'center'\n            });\n            doc.restoreGraphicsState();\n        };\n\n        const addPageNumbers = () => {\n            const pageCount = (doc as any).internal.getNumberOfPages();\n            for (let i = 1; i <= pageCount; i++) {\n                doc.setPage(i);\n                addWatermark(); // Apply watermark to each page\n                doc.setFontSize(8);\n                doc.setTextColor('#888888');\n                doc.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n            }\n        };\n\n        return { header, addPageNumbers, margin, pageWidth, pageHeight };\n    };\n\n    const exportLowStockPDF = () => {\n        const doc = new jsPDF();\n        const { header, addPageNumbers, margin, pageWidth } = setupPdfDoc(doc);\n        \n        autoTable(doc, {\n            head: [['Item Name', 'SKU', 'Re-order Point', 'Supplier']],\n            body: lowStockItems.map(item => [item.name, item.sku, item.reorderPoint, item.supplierName]),\n            theme: 'striped',\n            headStyles: { fillColor: [12, 127, 242] },\n            didDrawPage: (data) => {\n                header(data);\n                doc.setFontSize(18);\n                doc.setFont('helvetica', 'bold');\n                doc.text(\"Low Stock Report\", margin, 40);\n                const lowStockText = `The following items have a quantity of 0 and require immediate attention.`;\n                const splitLowStockText = doc.splitTextToSize(lowStockText, pageWidth - margin * 2);\n                doc.setFontSize(12);\n                doc.setFont('helvetica', 'normal');\n                doc.text(splitLowStockText, margin, 50);\n            },\n            startY: 60,\n            margin: { top: 35, left: margin, right: margin }\n        });\n\n        addPageNumbers();\n        doc.save(`low-stock-report-${new Date().toISOString().split('T')[0]}.pdf`);\n    };\n\n    const exportLowStockExcel = () => {\n        const wb = XLSX.utils.book_new();\n        const ws_low_stock = XLSX.utils.json_to_sheet(lowStockItems.map(item => ({\n            Name: item.name,\n            SKU: item.sku,\n            Quantity: item.quantity,\n            'Re-order Point': item.reorderPoint,\n            'Supplier Name': item.supplierName\n        })));\n        XLSX.utils.book_append_sheet(wb, ws_low_stock, \"Low Stock Items\");\n        XLSX.writeFile(wb, `low-stock-report-${new Date().toISOString().split('T')[0]}.xlsx`);\n    };\n\n    const exportFullInventoryPDF = () => {\n        const doc = new jsPDF();\n        const { header, addPageNumbers, margin, pageWidth } = setupPdfDoc(doc);\n        \n        autoTable(doc, {\n            head: [['Item Name', 'SKU', 'Category', 'Quantity', 'Unit Price']],\n            body: items.map(item => [item.name, item.sku, categories.find(c => c.id === item.categoryId)?.name || 'N/A', item.quantity, `$${item.price.toFixed(2)}`]),\n            theme: 'striped',\n            headStyles: { fillColor: [12, 127, 242] },\n            didDrawPage: (data) => {\n                header(data);\n                doc.setFontSize(18);\n                doc.setFont('helvetica', 'bold');\n                doc.text(\"Full Inventory Report\", margin, 40);\n                const fullInvText = `A complete list of all items currently in the inventory, including stock levels and pricing.`;\n                const splitFullInvText = doc.splitTextToSize(fullInvText, pageWidth - margin * 2);\n                doc.setFontSize(12);\n                doc.setFont('helvetica', 'normal');\n                doc.text(splitFullInvText, margin, 50);\n            },\n            startY: 60,\n            margin: { top: 35, left: margin, right: margin }\n        });\n        \n        addPageNumbers();\n        doc.save(`full-inventory-report-${new Date().toISOString().split('T')[0]}.pdf`);\n    };\n\n    const exportFullInventoryExcel = () => {\n        const wb = XLSX.utils.book_new();\n        const ws_inventory = XLSX.utils.json_to_sheet(items.map(item => ({\n            Name: item.name,\n            SKU: item.sku,\n            Category: categories.find(c => c.id === item.categoryId)?.name || 'N/A',\n            Quantity: item.quantity,\n            Price: item.price,\n            'Re-order Point': item.reorderPoint,\n            'Supplier Name': item.supplierName\n        })));\n        XLSX.utils.book_append_sheet(wb, ws_inventory, \"Full Inventory\");\n        XLSX.writeFile(wb, `full-inventory-report-${new Date().toISOString().split('T')[0]}.xlsx`);\n    };\n\n    const exportConsolidatedPDF = async () => {\n        if (!aiReport) return;\n        setIsGenerating(true);\n        const doc = new jsPDF();\n        const { header, addPageNumbers, margin, pageWidth, pageHeight } = setupPdfDoc(doc);\n        let finalY = 0;\n\n        const pageSetup = (data: any) => {\n            header(data);\n            finalY = data.cursor?.y || 0;\n        };\n        \n        // --- Title Page ---\n        header({} as any);\n        doc.setFontSize(26);\n        doc.setFont('helvetica', 'bold');\n        doc.setTextColor('#0C7FF2');\n        doc.text(\"Comprehensive Inventory Analysis\", margin, 40);\n        \n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'normal');\n        doc.setTextColor('#333333');\n        const summaryText = `This report provides a holistic overview of the inventory status, including an AI-powered health analysis, stock level visualizations, detailed item lists, and actionable insights.`;\n        const splitSummary = doc.splitTextToSize(summaryText, pageWidth - margin * 2);\n        doc.text(splitSummary, margin, 55);\n\n        let currentY = 80;\n\n        doc.setFontSize(16);\n        doc.setFont('helvetica', 'bold');\n        doc.text(\"Stock Levels: Top 10 Items by Quantity\", margin, currentY);\n        currentY += 15;\n\n        // --- Stock Level Chart ---\n        const chartData = [...items].sort((a, b) => b.quantity - a.quantity).slice(0, 10);\n        if (chartData.length > 0) {\n            const chartX = margin + 10;\n            const chartStartY = currentY;\n            const chartHeight = 80;\n            const chartWidth = pageWidth - (margin * 2) - 20;\n            \n            const maxQuantity = Math.max(...chartData.map(d => d.quantity), 0);\n            const barWidth = chartWidth / (chartData.length * 2);\n    \n            // Draw Chart Axes\n            doc.setDrawColor(\"#cccccc\");\n            doc.line(chartX, chartStartY + chartHeight, chartX, chartStartY - 5); // Y-axis\n            doc.line(chartX, chartStartY + chartHeight, chartX + chartWidth, chartStartY + chartHeight); // X-axis\n            \n            // Draw Bars and Labels\n            doc.setFontSize(7);\n            doc.setTextColor('#333333');\n            chartData.forEach((item, index) => {\n                const barHeight = maxQuantity > 0 ? (item.quantity / maxQuantity) * chartHeight : 0;\n                const barX = chartX + (index * 2 + 0.5) * barWidth;\n                \n                doc.setFillColor(12, 127, 242);\n                doc.rect(barX, chartStartY + chartHeight - barHeight, barWidth, barHeight, 'F');\n                \n                doc.text(item.name.slice(0,12), barX + barWidth / 2, chartStartY + chartHeight + 4, { align: 'right', angle: -45 });\n            });\n            \n            // Y-axis labels and gridlines\n            doc.setFontSize(8);\n            doc.setDrawColor(\"#e0e0e0\");\n            for(let i=0; i <= 5; i++) {\n                const value = Math.round((maxQuantity / 5) * i);\n                const yPos = chartStartY + chartHeight - ((value / maxQuantity) * chartHeight);\n                doc.text(value.toString(), chartX - 4, yPos + 3, { align: 'right' });\n                doc.line(chartX + 1, yPos, chartX + chartWidth, yPos);\n            }\n        }\n        \n        // --- AI Health Report Section ---\n        if (items.length > 0) {\n            doc.addPage();\n            header({} as any);\n            doc.setFontSize(18);\n            doc.setFont('helvetica', 'bold');\n            doc.text(\"AI Inventory Health\", margin, 40);\n            \n            finalY = 50;\n\n            doc.setFontSize(12);\n            doc.setFont('helvetica', 'bold');\n            doc.text(\"Overall Health Score:\", margin, finalY);\n            doc.setFont('helvetica', 'normal');\n            doc.text(`${aiReport.overallHealthScore} / 100`, margin + 45, finalY);\n            finalY += 10;\n            \n            aiReport.analysis.forEach(section => {\n                if (finalY + 10 > pageHeight - 30) {\n                    doc.addPage();\n                    header({} as any);\n                    finalY = 40;\n                }\n                doc.setFontSize(14);\n                doc.setFont('helvetica', 'bold');\n                doc.text(section.title, margin, finalY);\n                finalY += 6;\n                \n                doc.setFontSize(10);\n                doc.setFont('helvetica', 'normal');\n                section.points.forEach(point => {\n                    const splitText = doc.splitTextToSize(`• ${point}`, pageWidth - (margin * 2) - 4);\n                    if (finalY + (splitText.length * 5) > pageHeight - 30) {\n                        doc.addPage();\n                        header({} as any);\n                        finalY = 40;\n                    }\n                    doc.text(splitText, margin + 4, finalY);\n                    finalY += (splitText.length * 5);\n                });\n                finalY += 4;\n            });\n            \n            if (aiReport.lowStockItems && aiReport.lowStockItems.length > 0) {\n                if (finalY > (pageHeight - 50)) {\n                    doc.addPage();\n                    header({} as any);\n                    finalY = 40;\n                }\n                finalY += 5;\n                autoTable(doc, {\n                    head: [['Low Stock Item', 'Quantity', 'Price']],\n                    body: aiReport.lowStockItems.map(i => [i.name, i.quantity, `$${i.price.toFixed(2)}`]),\n                    startY: finalY,\n                    theme: 'striped',\n                    headStyles: { fillColor: [220, 53, 69] },\n                    didDrawPage: (data) => pageSetup(data),\n                    margin: { top: 35, left: margin, right: margin }\n                });\n                finalY = (doc as any).lastAutoTable.finalY + 5;\n            }\n\n             if (aiReport.inStockItems && aiReport.inStockItems.length > 0) {\n                if (finalY > (pageHeight - 50)) {\n                    doc.addPage();\n                    header({} as any);\n                    finalY = 40;\n                }\n                autoTable(doc, {\n                    head: [['In-Stock Item', 'Quantity', 'Price']],\n                    body: aiReport.inStockItems.map(i => [i.name, i.quantity, `$${i.price.toFixed(2)}`]),\n                    startY: finalY,\n                    theme: 'striped',\n                    headStyles: { fillColor: [40, 167, 69] },\n                    didDrawPage: pageSetup,\n                    margin: { top: 35, left: margin, right: margin }\n                });\n                finalY = (doc as any).lastAutoTable.finalY;\n            }\n        }\n\n        // --- Low Stock Report Section ---\n        doc.addPage();\n        header({} as any);\n        autoTable(doc, {\n            head: [['Item Name', 'SKU', 'Re-order Point', 'Supplier']],\n            body: lowStockItems.map(item => [item.name, item.sku, item.reorderPoint, item.supplierName]),\n            theme: 'striped',\n            headStyles: { fillColor: [12, 127, 242] },\n            didDrawPage: (data) => {\n                header(data);\n                doc.setFontSize(18);\n                doc.setFont('helvetica', 'bold');\n                doc.text(\"Low Stock Report\", margin, 40);\n                doc.setFontSize(12);\n                doc.setFont('helvetica', 'normal');\n                const lowStockText = `The following items have a quantity of 0 and require immediate attention.`;\n                const splitLowStockText = doc.splitTextToSize(lowStockText, pageWidth - margin * 2);\n                doc.text(splitLowStockText, margin, 50);\n            },\n            startY: 60,\n            margin: { top: 35, left: margin, right: margin }\n        });\n\n        // --- Full Inventory Report Section ---\n        doc.addPage();\n        header({} as any);\n        autoTable(doc, {\n            head: [['Item Name', 'SKU', 'Category', 'Quantity', 'Unit Price']],\n            body: items.map(item => [item.name, item.sku, categories.find(c => c.id === item.categoryId)?.name || 'N/A', item.quantity, `$${item.price.toFixed(2)}`]),\n            theme: 'striped',\n            headStyles: { fillColor: [12, 127, 242] },\n            didDrawPage: (data) => {\n                header(data);\n                doc.setFontSize(18);\n                doc.setFont('helvetica', 'bold');\n                doc.text(\"Full Inventory Report\", margin, 40);\n                doc.setFontSize(12);\n                doc.setFont('helvetica', 'normal');\n                const fullInvText = `A complete list of all items currently in the inventory, including stock levels and pricing.`;\n                const splitFullInvText = doc.splitTextToSize(fullInvText, pageWidth - margin * 2);\n                doc.text(splitFullInvText, margin, 50);\n            },\n            startY: 60,\n            margin: { top: 35, left: margin, right: margin }\n        });\n\n        addPageNumbers();\n        doc.save(`consolidated-inventory-report-${new Date().toISOString().split('T')[0]}.pdf`);\n        setIsGenerating(false);\n    };\n\n    const exportConsolidatedExcel = () => {\n        const wb = XLSX.utils.book_new();\n\n        // Low Stock Items Sheet\n        const ws_low_stock = XLSX.utils.json_to_sheet(lowStockItems.map(item => ({\n            Name: item.name,\n            SKU: item.sku,\n            Quantity: item.quantity,\n            'Re-order Point': item.reorderPoint,\n            'Supplier Name': item.supplierName\n        })));\n        XLSX.utils.book_append_sheet(wb, ws_low_stock, \"Low Stock Items\");\n\n        // Full Inventory Sheet\n        const ws_inventory = XLSX.utils.json_to_sheet(items.map(item => ({\n            Name: item.name,\n            SKU: item.sku,\n            Category: categories.find(c => c.id === item.categoryId)?.name || 'N/A',\n            Quantity: item.quantity,\n            Price: item.price,\n            'Re-order Point': item.reorderPoint,\n            'Supplier Name': item.supplierName\n        })));\n        XLSX.utils.book_append_sheet(wb, ws_inventory, \"Full Inventory\");\n        \n        // In Stock Items Sheet\n        const ws_in_stock = XLSX.utils.json_to_sheet(inStockItems.map(item => ({\n            Name: item.name,\n            SKU: item.sku,\n            Category: categories.find(c => c.id === item.categoryId)?.name || 'N/A',\n            Quantity: item.quantity,\n            Price: item.price\n        })));\n        XLSX.utils.book_append_sheet(wb, ws_in_stock, \"In-Stock Items\");\n\n        // Categories Sheet\n        const ws_categories = XLSX.utils.json_to_sheet(categories.map(category => ({\n            Name: category.name,\n            Description: category.description || 'N/A',\n            'Item Count': category.itemCount\n        })));\n        XLSX.utils.book_append_sheet(wb, ws_categories, \"Categories\");\n\n        XLSX.writeFile(wb, `consolidated-inventory-report-${new Date().toISOString().split('T')[0]}.xlsx`);\n    };\n\n    if (!isClient) {\n        return (\n            <>\n                <PageHeader\n                    title=\"Reports\"\n                    description=\"Generate and view inventory reports.\"\n                />\n                <div className=\"grid gap-6\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Low Stock Report</CardTitle>\n                            <CardDescription>Items that are at or below their re-order point.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                           <Skeleton className=\"h-20 w-full\" />\n                        </CardContent>\n                    </Card>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Full Inventory Report</CardTitle>\n                            <CardDescription>A complete list of all items in your inventory.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                           <Skeleton className=\"h-20 w-full\" />\n                        </CardContent>\n                    </Card>\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <PageHeader\n                title=\"Reports\"\n                description=\"Generate and view inventory reports.\"\n            >\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\" disabled={isGenerating || !aiReport}>\n                            {isGenerating ? \"Generating...\" : \"Export Whole Report as...\"}\n                            <ChevronDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                        <DropdownMenuItem onClick={exportConsolidatedPDF} disabled={isGenerating || !aiReport}>\n                            <FileDown className=\"mr-2 h-4 w-4\" />\n                            Export as PDF\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={exportConsolidatedExcel} disabled={isGenerating || !aiReport}>\n                            <FileDown className=\"mr-2 h-4 w-4\" />\n                            Export as Excel\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </PageHeader>\n            <div className=\"grid gap-6\">\n                <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                        <div>\n                            <CardTitle>Low Stock Report</CardTitle>\n                            <CardDescription>Items that have a quantity of 0.</CardDescription>\n                        </div>\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <Button variant=\"outline\" size=\"sm\">\n                                    Export as...\n                                    <ChevronDown className=\"ml-2 h-4 w-4\" />\n                                </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent>\n                                <DropdownMenuItem onClick={exportLowStockPDF}>\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\n                                    Export as PDF\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={exportLowStockExcel}>\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\n                                    Export as Excel\n                                </DropdownMenuItem>\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                    </CardHeader>\n                    <CardContent>\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Item</TableHead>\n                                    <TableHead>SKU</TableHead>\n                                    <TableHead className=\"text-right\">Quantity</TableHead>\n                                    <TableHead className=\"text-right\">Re-order Point</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {lowStockItems.length > 0 ? lowStockItems.map(item => (\n                                    <TableRow key={item.id}>\n                                        <TableCell className=\"font-medium\">{item.name}</TableCell>\n                                        <TableCell>{item.sku}</TableCell>\n                                        <TableCell className=\"text-right\">{item.quantity}</TableCell>\n                                        <TableCell className=\"text-right\">{item.reorderPoint}</TableCell>\n                                    </TableRow>\n                                )) : (\n                                     <TableRow>\n                                        <TableCell colSpan={4} className=\"text-center\">\n                                            No items are currently low on stock.\n                                        </TableCell>\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </CardContent>\n                </Card>\n                <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                        <div>\n                            <CardTitle>Full Inventory Report</CardTitle>\n                            <CardDescription>A complete list of all items in your inventory.</CardDescription>\n                        </div>\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <Button variant=\"outline\" size=\"sm\">\n                                    Export as...\n                                    <ChevronDown className=\"ml-2 h-4 w-4\" />\n                                </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent>\n                                <DropdownMenuItem onClick={exportFullInventoryPDF}>\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\n                                    Export as PDF\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={exportFullInventoryExcel}>\n                                    <FileDown className=\"mr-2 h-4 w-4\" />\n                                    Export as Excel\n                                </DropdownMenuItem>\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                    </CardHeader>\n                    <CardContent>\n                    <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Item</TableHead>\n                                    <TableHead>Category</TableHead>\n                                    <TableHead className=\"text-right\">Quantity</TableHead>\n                                    <TableHead className=\"text-right\">Price</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {items.length > 0 ? items.map(item => (\n                                    <TableRow key={item.id}>\n                                        <TableCell className=\"font-medium\">{item.name}</TableCell>\n                                        <TableCell>{categories.find(c => c.id === item.categoryId)?.name || 'N/A'}</TableCell>\n                                        <TableCell className=\"text-right\">{item.quantity}</TableCell>\n                                        <TableCell className=\"text-right\">${item.price.toFixed(2)}</TableCell>\n                                    </TableRow>\n                                )) : (\n                                     <TableRow>\n                                        <TableCell colSpan={4} className=\"text-center\">\n                                            No items in inventory.\n                                        </TableCell>\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </CardContent>\n                </Card>\n            </div>\n        </>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}